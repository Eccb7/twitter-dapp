{"version":3,"file":"solanaProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/solana-provider/webpack/bootstrap","webpack://@web3auth/solana-provider/webpack/runtime/compat get default export","webpack://@web3auth/solana-provider/webpack/runtime/define property getters","webpack://@web3auth/solana-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/solana-provider/webpack/runtime/make namespace object","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/solana-provider/./src/rpc/JrpcClient.ts","webpack://@web3auth/solana-provider/./src/rpc/solanaRpcMiddlewares.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/baseInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"bs58\"","webpack://@web3auth/solana-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/injectedProviderProxy.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@solana/web3.js\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/slopeInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/solletInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/tweetnacl-js\"","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/index.ts","webpack://@web3auth/solana-provider/./src/providers/index.ts","webpack://@web3auth/solana-provider/./src/solanaWallet.ts","webpack://@web3auth/solana-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bs58\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@solana/web3.js\");","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","export * from \"./interface\";\nexport * from \"./phantom/phantomInjectedProvider\";\nexport * from \"./slope/slopeInjectedProvider\";\nexport * from \"./solflare/solflareInjectedProvider\";\nexport * from \"./sollet/solletInjectedProvider\";\nexport * from \"./torus/torusInjectedProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tweetnacl-js\");","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./solanaPrivateKeyProvider\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProvider\";\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","export * from \"./interface\";\nexport * from \"./providers\";\nexport * from \"./solanaWallet\";\n"],"names":["createFetchMiddleware","mergeMiddleware","createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","createAsyncMiddleware","createGetAccountsMiddleware","getAccounts","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","BaseProvider","BaseInjectedProvider","config","state","chainConfig","chainNamespace","SOLANA","_","Promise","resolve","injectedProvider","engine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","updateProviderEngineProxy","lookupNetwork","update","bs58","ethErrors","getBaseProviderHandlers","publicKey","encode","toBytes","rpc","methodNotSupported","params","message","transaction","display","sigData","signature","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","Connection","PublicKey","getSlopeHandlers","getProviderEngineProxy","connect","data","txMessage","invalidRequest","serializeMessage","decode","addSignature","custom","code","conn","sendRawTransaction","serialize","allTxns","unsignedTx","i","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getSolletHandlers","sign","SolletInjectedProvider","getTorusHandlers","sendTransaction","transactions","isHexStrict","WalletInitializationError","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","toString","parseInt","rpcConnectionError","emit","on","configure","setupProvider","Keypair","nacl","privKey","keyPairGenerator","fromSecretKey","Buffer","from","keyPair","toBase58","secretKey","partialSign","signedMsg","detached","_providerEngineProxy","sig","txns","tx","SolanaPrivateKeyProvider","privateKey","getChainSwitchMiddleware","getAccountMiddleware","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchChain","chainSwitchMiddleware","accountHandlers","updateAccount","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args"],"sourceRoot":""}