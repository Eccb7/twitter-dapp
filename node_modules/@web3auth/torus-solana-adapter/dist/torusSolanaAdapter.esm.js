import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _get from '@babel/runtime/helpers/get';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import Torus from '@toruslabs/solana-embed';
import { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, getChainConfig, WalletLoginError, Web3AuthError, WalletInitializationError } from '@web3auth/base';
import { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';
import { TorusInjectedProvider } from '@web3auth/solana-provider';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SolanaWalletAdapter = /*#__PURE__*/function (_BaseSolanaAdapter) {
  _inherits(SolanaWalletAdapter, _BaseSolanaAdapter);

  var _super = _createSuper(SolanaWalletAdapter);

  function SolanaWalletAdapter(params) {
    var _this;

    _classCallCheck(this, SolanaWalletAdapter);

    _this = _super.call(this, params);

    _defineProperty(_assertThisInitialized(_this), "name", WALLET_ADAPTERS.TORUS_SOLANA);

    _defineProperty(_assertThisInitialized(_this), "adapterNamespace", ADAPTER_NAMESPACES.SOLANA);

    _defineProperty(_assertThisInitialized(_this), "currentChainNamespace", CHAIN_NAMESPACES.SOLANA);

    _defineProperty(_assertThisInitialized(_this), "type", ADAPTER_CATEGORY.EXTERNAL);

    _defineProperty(_assertThisInitialized(_this), "status", ADAPTER_STATUS.NOT_READY);

    _defineProperty(_assertThisInitialized(_this), "torusInstance", null);

    _defineProperty(_assertThisInitialized(_this), "torusWalletOptions", void 0);

    _defineProperty(_assertThisInitialized(_this), "initParams", void 0);

    _defineProperty(_assertThisInitialized(_this), "loginSettings", {});

    _defineProperty(_assertThisInitialized(_this), "solanaProvider", null);

    _defineProperty(_assertThisInitialized(_this), "rehydrated", false);

    _this.torusWalletOptions = params.adapterSettings || {};
    _this.initParams = params.initParams || {};
    _this.loginSettings = params.loginSettings || {};
    _this.chainConfig = params.chainConfig || null;
    _this.sessionTime = params.sessionTime || 86400;
    return _this;
  }

  _createClass(SolanaWalletAdapter, [{
    key: "provider",
    get: function get() {
      if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {
        var _this$solanaProvider;

        return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;
      }

      return null;
    },
    set: function set(_) {
      throw new Error("Not implemented");
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var network, _this$chainConfig, blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId, _this$chainConfig2, _chainId, _blockExplorer, _displayName, _rpcTarget, _ticker, _tickerName;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _get(_getPrototypeOf(SolanaWalletAdapter.prototype), "checkInitializationRequirements", this).call(this); // set chainConfig for mainnet by default if not set


                if (!this.chainConfig) {
                  this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, "0x1");
                  _this$chainConfig = this.chainConfig, blockExplorer = _this$chainConfig.blockExplorer, displayName = _this$chainConfig.displayName, ticker = _this$chainConfig.ticker, tickerName = _this$chainConfig.tickerName, rpcTarget = _this$chainConfig.rpcTarget, chainId = _this$chainConfig.chainId;
                  network = {
                    chainId: chainId,
                    rpcTarget: rpcTarget,
                    blockExplorerUrl: blockExplorer,
                    displayName: displayName,
                    ticker: ticker,
                    tickerName: tickerName,
                    logo: ""
                  };
                } else {
                  _this$chainConfig2 = this.chainConfig, _chainId = _this$chainConfig2.chainId, _blockExplorer = _this$chainConfig2.blockExplorer, _displayName = _this$chainConfig2.displayName, _rpcTarget = _this$chainConfig2.rpcTarget, _ticker = _this$chainConfig2.ticker, _tickerName = _this$chainConfig2.tickerName;
                  network = {
                    chainId: _chainId,
                    rpcTarget: _rpcTarget,
                    blockExplorerUrl: _blockExplorer,
                    displayName: _displayName,
                    tickerName: _tickerName,
                    ticker: _ticker,
                    logo: ""
                  };
                }

                this.torusInstance = new Torus(this.torusWalletOptions);
                log.debug("initializing torus solana adapter init");
                _context.next = 6;
                return this.torusInstance.init(_objectSpread(_objectSpread({
                  showTorusButton: false
                }, this.initParams), {}, {
                  network: network
                }));

              case 6:
                this.solanaProvider = new TorusInjectedProvider({
                  config: {
                    chainConfig: this.chainConfig
                  }
                });
                this.status = ADAPTER_STATUS.READY;
                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);
                _context.prev = 9;
                log.debug("initializing torus solana adapter");

                if (!options.autoConnect) {
                  _context.next = 15;
                  break;
                }

                this.rehydrated = true;
                _context.next = 15;
                return this.connect();

              case 15:
                _context.next = 21;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](9);
                log.error("Failed to connect with cached torus solana provider", _context.t0);
                this.emit(ADAPTER_EVENTS.ERRORED, _context.t0);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[9, 17]]);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var torusInpageProvider, _this$chainConfig3, chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName, network;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _get(_getPrototypeOf(SolanaWalletAdapter.prototype), "checkConnectionRequirements", this).call(this);

                if (this.torusInstance) {
                  _context2.next = 3;
                  break;
                }

                throw WalletInitializationError.notReady("Torus wallet is not initialized");

              case 3:
                if (this.solanaProvider) {
                  _context2.next = 5;
                  break;
                }

                throw WalletInitializationError.notReady("Torus wallet is not initialized");

              case 5:
                this.status = ADAPTER_STATUS.CONNECTING;
                this.emit(ADAPTER_EVENTS.CONNECTING, {
                  adapter: WALLET_ADAPTERS.TORUS_SOLANA
                });
                _context2.prev = 7;
                _context2.next = 10;
                return this.torusInstance.login(this.loginSettings);

              case 10:
                _context2.prev = 10;
                torusInpageProvider = this.torusInstance.provider;
                torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);
                torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);
                torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);
                torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);
                _context2.next = 18;
                return this.solanaProvider.setupProvider(torusInpageProvider);

              case 18:
                _context2.next = 30;
                break;

              case 20:
                _context2.prev = 20;
                _context2.t0 = _context2["catch"](10);

                if (!(_context2.t0 instanceof Web3AuthError && _context2.t0.code === 5010)) {
                  _context2.next = 29;
                  break;
                }

                _this$chainConfig3 = this.chainConfig, chainId = _this$chainConfig3.chainId, blockExplorer = _this$chainConfig3.blockExplorer, displayName = _this$chainConfig3.displayName, rpcTarget = _this$chainConfig3.rpcTarget, ticker = _this$chainConfig3.ticker, tickerName = _this$chainConfig3.tickerName;
                network = {
                  chainId: chainId,
                  rpcTarget: rpcTarget,
                  blockExplorerUrl: blockExplorer,
                  displayName: displayName,
                  tickerName: tickerName,
                  ticker: ticker,
                  logo: ""
                };
                _context2.next = 27;
                return this.torusInstance.setProvider(network);

              case 27:
                _context2.next = 30;
                break;

              case 29:
                throw _context2.t0;

              case 30:
                this.status = ADAPTER_STATUS.CONNECTED;
                this.torusInstance.showTorusButton();
                this.emit(ADAPTER_STATUS.CONNECTED, {
                  adapter: WALLET_ADAPTERS.TORUS_SOLANA,
                  reconnected: this.rehydrated
                });
                return _context2.abrupt("return", this.provider);

              case 36:
                _context2.prev = 36;
                _context2.t1 = _context2["catch"](7);
                // ready again to be connected
                this.status = ADAPTER_STATUS.READY;
                this.rehydrated = false;
                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t1);
                throw WalletLoginError.connectionError("Failed to login with torus solana wallet");

              case 42:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[7, 36], [10, 20]]);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var options,
            _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {
                  cleanup: false
                };

                if (this.torusInstance) {
                  _context3.next = 3;
                  break;
                }

                throw WalletInitializationError.notReady("Torus wallet is not initialized");

              case 3:
                _context3.next = 5;
                return _get(_getPrototypeOf(SolanaWalletAdapter.prototype), "disconnect", this).call(this);

              case 5:
                _context3.next = 7;
                return this.torusInstance.logout();

              case 7:
                if (options.cleanup) {
                  // ready to connect again
                  this.status = ADAPTER_STATUS.NOT_READY;
                  this.torusInstance = null;
                  this.solanaProvider = null;
                } else {
                  // ready to connect again
                  this.status = ADAPTER_STATUS.READY;
                }

                this.emit(ADAPTER_EVENTS.DISCONNECTED);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function disconnect() {
        return _disconnect.apply(this, arguments);
      }

      return disconnect;
    }()
  }, {
    key: "getUserInfo",
    value: function () {
      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var userInfo;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {
                  _context4.next = 2;
                  break;
                }

                throw WalletLoginError.notConnectedError("Not connected with wallet");

              case 2:
                if (this.torusInstance) {
                  _context4.next = 4;
                  break;
                }

                throw WalletInitializationError.notReady("Torus wallet is not initialized");

              case 4:
                _context4.next = 6;
                return this.torusInstance.getUserInfo();

              case 6:
                userInfo = _context4.sent;
                return _context4.abrupt("return", userInfo);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getUserInfo() {
        return _getUserInfo.apply(this, arguments);
      }

      return getUserInfo;
    }()
  }, {
    key: "setAdapterSettings",
    value: function setAdapterSettings(options) {
      if (this.status === ADAPTER_STATUS.READY) return;

      if (options !== null && options !== void 0 && options.sessionTime) {
        this.sessionTime = options.sessionTime;
      }

      if (options !== null && options !== void 0 && options.clientId) {
        this.clientId = options.clientId;
      }
    }
  }]);

  return SolanaWalletAdapter;
}(BaseSolanaAdapter);

export { SolanaWalletAdapter };
//# sourceMappingURL=torusSolanaAdapter.esm.js.map
