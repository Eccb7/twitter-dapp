{"version":3,"file":"torusSolanaAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/torus-solana-adapter/webpack/bootstrap","webpack://@web3auth/torus-solana-adapter/webpack/runtime/compat get default export","webpack://@web3auth/torus-solana-adapter/webpack/runtime/define property getters","webpack://@web3auth/torus-solana-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/torus-solana-adapter/webpack/runtime/make namespace object","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/get\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@toruslabs/solana-embed\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base-solana-adapter\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/torus-solana-adapter/./src/solanaWalletAdapter.ts","webpack://@web3auth/torus-solana-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/get\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/solana-embed\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-solana-adapter\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/solana-provider\");","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n","export * from \"./solanaWalletAdapter\";\n"],"names":["Torus","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","getChainConfig","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","BaseSolanaAdapter","TorusInjectedProvider","SolanaWalletAdapter","params","TORUS_SOLANA","SOLANA","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","sessionTime","status","CONNECTED","solanaProvider","provider","_","Error","options","blockExplorer","displayName","ticker","tickerName","rpcTarget","chainId","network","blockExplorerUrl","logo","torusInstance","debug","init","showTorusButton","config","READY","emit","autoConnect","rehydrated","connect","error","ERRORED","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","code","setProvider","reconnected","connectionError","cleanup","logout","DISCONNECTED","notConnectedError","getUserInfo","userInfo","clientId"],"sourceRoot":""}