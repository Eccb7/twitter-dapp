{"version":3,"file":"ethereumProvider.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA,MAAM,gCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,mBAA4B;;;ACAlC,MAAM,wBAA4B;;;ACAlC,MAAM,yCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,gCAA4B;;ACAlC,MAAM,8BAA4B;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,6BAA4B;;ACAlC,MAAM,uCAA4B;;;;;;;;;;ACClC;AACA;;AAIA,SAASG,gBAAT,CAA0BC,GAA1B,EAAgD;EAC9C;EACA,OAAOA,GAAG,CAACC,MAAJ,KAAe,IAAI,KAAK,CAA/B;AACD;;AAEM,SAASC,sBAAT,OAYsD;EAAA,IAX3DC,WAW2D,QAX3DA,WAW2D;EAAA,IAV3DC,aAU2D,QAV3DA,aAU2D;EAAA,IAT3DC,qBAS2D,QAT3DA,qBAS2D;EAAA,IAR3DC,0BAQ2D,QAR3DA,0BAQ2D;EAAA,IAP3DC,qBAO2D,QAP3DA,qBAO2D;EAAA,IAN3DC,sBAM2D,QAN3DA,sBAM2D;EAAA,IAL3DC,kBAK2D,QAL3DA,kBAK2D;EAAA,IAJ3DC,sBAI2D,QAJ3DA,sBAI2D;EAAA,IAH3DC,mBAG2D,QAH3DA,mBAG2D;EAAA,IAF3DC,qBAE2D,QAF3DA,qBAE2D;EAAA,IAD3DC,qBAC2D,QAD3DA,qBAC2D;;EAC3D,IAAI,CAACV,WAAL,EAAkB;IAChB,MAAM,IAAIW,KAAJ,CAAU,8BAAV,CAAN;EACD,CAH0D,CAK3D;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;;;EAd6D,SAe5CC,6BAf4C;IAAA;EAAA,EA+B3D;EACA;EACA;;;EAjC2D;IAAA,qGAe3D,iBAA6CC,OAA7C,EAA8DC,GAA9D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MACM,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACf,MAAR,GAAiB,CADtD;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAGqCE,WAAW,CAACc,GAAD,CAHhD;;YAAA;cAGUC,QAHV;cAIUC,kBAJV,GAIyCD,QAAQ,CAACE,GAAT,CAAa,UAACC,QAAD;gBAAA,OAAcA,QAAQ,CAACC,WAAT,EAAd;cAAA,CAAb,CAJzC;cAKUC,iBALV,GAKsCP,OAAO,CAACM,WAAR,EALtC;;cAAA,KAOQH,kBAAkB,CAACK,QAAnB,CAA4BD,iBAA5B,CAPR;gBAAA;gBAAA;cAAA;;cAAA,iCAQaA,iBARb;;YAAA;cAAA,MAWQzB,mEAAA,CAA4B;gBAChC6B,OAAO;cADyB,CAA5B,CAXR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAf2D;IAAA;EAAA;;EAAA,SAmC5CC,cAnC4C;IAAA;EAAA;;EAAA;IAAA,sFAmC3D,kBAA8BX,GAA9B,EAAyDY,GAAzD;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACqB1B,WAAW,CAACc,GAAD,CADhC;;YAAA;cACEY,GAAG,CAACC,MADN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAnC2D;IAAA;EAAA;;EAAA,SAuC5CC,oBAvC4C;IAAA;EAAA,EA4C3D;EACA;EACA;;;EA9C2D;IAAA,4FAuC3D,kBAAoCd,GAApC,EAA+DY,GAA/D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACyB1B,WAAW,CAACc,GAAD,CADpC;;YAAA;cACQC,QADR;cAEEW,GAAG,CAACC,MAAJ,GAAaZ,QAAQ,CAAC,CAAD,CAAR,IAAe,IAA5B;;YAFF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAvC2D;IAAA;EAAA;;EAAA,SAgD5Cc,eAhD4C;IAAA;EAAA;;EAAA;IAAA,uFAgD3D,kBAA+Bf,GAA/B,EAA0DY,GAA1D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOpB,kBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUX,wEAAA,EAFV;;YAAA;cAKQoC,QALR,GAKuCjB,GAAG,CAACkB,MAAL,CAAoC,CAApC,KAA0C;gBAC5EC,IAAI,EAAE;cADsE,CALhF;cAAA;cAAA,OAQwBrB,6BAA6B,CAACmB,QAAQ,CAACE,IAAV,EAA0BnB,GAA1B,CARrD;;YAAA;cAQEiB,QAAQ,CAACE,IARX;cAAA;cAAA,OASqB3B,kBAAkB,CAACyB,QAAD,EAAWjB,GAAX,CATvC;;YAAA;cASEY,GAAG,CAACC,MATN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAhD2D;IAAA;EAAA;;EAAA,SA4D5CO,eA5D4C;IAAA;EAAA,EAwE3D;EACA;EACA;;;EA1E2D;IAAA,uFA4D3D,kBAA+BpB,GAA/B,EAA0DY,GAA1D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOnB,sBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUZ,wEAAA,EAFV;;YAAA;cAKQoC,QALR,GAKuCjB,GAAG,CAACkB,MAAL,CAAoC,CAApC,KAA0C;gBAC5EC,IAAI,EAAE;cADsE,CALhF;cAAA;cAAA,OAQwBrB,6BAA6B,CAACmB,QAAQ,CAACE,IAAV,EAA0BnB,GAA1B,CARrD;;YAAA;cAQEiB,QAAQ,CAACE,IARX;cAAA;cAAA,OASqB1B,sBAAsB,CAACwB,QAAD,EAAWjB,GAAX,CAT3C;;YAAA;cASEY,GAAG,CAACC,MATN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA5D2D;IAAA;EAAA;;EAAA,SA4E5CQ,OA5E4C;IAAA;EAAA;;EAAA;IAAA,+EA4E3D,kBAAuBrB,GAAvB,EAAkDY,GAAlD;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOtB,qBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUT,wEAAA,EAFV;;YAAA;cAAA;cAAA,OAKgCiB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAAD,EAA8BlB,GAA9B,CAL7D;;YAAA;cAKQD,OALR;cAMQW,OANR,GAM2BV,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAN1B;cAOQI,WAPR,GAOgDtB,GAAG,CAACkB,MAAL,CAA0C,CAA1C,KAAgD,EAP/F;cAQQK,SARR,mCASOD,WATP;gBAUIH,IAAI,EAAEpB,OAVV;gBAWIyB,IAAI,EAAEd;cAXV;cAAA;cAAA,OAcqBpB,qBAAqB,CAACiC,SAAD,EAAYvB,GAAZ,CAd1C;;YAAA;cAcEY,GAAG,CAACC,MAdN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA5E2D;IAAA;EAAA;;EAAA,SA6F5CY,aA7F4C;IAAA;EAAA;;EAAA;IAAA,qFA6F3D,kBAA6BzB,GAA7B,EAAwDY,GAAxD;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOlB,mBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUb,wEAAA,EAFV;;YAAA;cAKQ6B,OALR,GAKgCV,GAAG,CAACkB,MAAL,CAA8B,CAA9B,CAL/B;cAAA;cAAA,OAMgCpB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAAD,EAA8BlB,GAA9B,CAN7D;;YAAA;cAMQD,OANR;cAOQ2B,OAPR,GAOkB,IAPlB;cAQQJ,WARR,GAQgDtB,GAAG,CAACkB,MAAL,CAA0C,CAA1C,KAAgD,EAR/F;cASQK,SATR,mCAUOD,WAVP;gBAWIH,IAAI,EAAEpB,OAXV;gBAYIyB,IAAI,EAAEd;cAZV;cAAA;cAAA,OAeqBhB,mBAAmB,CAAC6B,SAAD,EAAYvB,GAAZ,EAAiB0B,OAAjB,CAfxC;;YAAA;cAeEd,GAAG,CAACC,MAfN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA7F2D;IAAA;EAAA;;EAAA,SA+G5Cc,eA/G4C;IAAA;EAAA;;EAAA;IAAA,sFA+G3D,kBAA+B3B,GAA/B,EAA0DY,GAA1D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOjB,qBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUd,wEAAA,EAFV;;YAAA;cAAA;cAAA,OAKgCiB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAAD,EAA8BlB,GAA9B,CAL7D;;YAAA;cAKQD,OALR;cAMQW,OANR,GAM+CV,GAAG,CAACkB,MAAL,CAA6C,CAA7C,CAN9C;cAOQQ,OAPR,GAOkB,IAPlB;cAQQH,SARR,GAQoE;gBAChEC,IAAI,EAAEd,OAD0D;gBAEhES,IAAI,EAAEpB,OAF0D;gBAGhE2B,OAAO,EAAPA;cAHgE,CARpE;cAAA;cAAA,OAcqB/B,qBAAqB,CAAC4B,SAAD,EAAYvB,GAAZ,EAAiB0B,OAAjB,CAd1C;;YAAA;cAcEd,GAAG,CAACC,MAdN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA/G2D;IAAA;EAAA;;EAAA,SAgI5Ce,eAhI4C;IAAA;EAAA;;EAAA;IAAA,uFAgI3D,kBAA+B5B,GAA/B,EAA0DY,GAA1D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOhB,qBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUf,wEAAA,EAFV;;YAAA;cAAA;cAAA,OAKgCiB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAAD,EAA8BlB,GAA9B,CAL7D;;YAAA;cAKQD,OALR;cAMQW,OANR,GAM+CV,GAAG,CAACkB,MAAL,CAA6C,CAA7C,CAN9C;cAOQQ,OAPR,GAOkB,IAPlB;cAQQH,SARR,GAQoE;gBAChEC,IAAI,EAAEd,OAD0D;gBAEhES,IAAI,EAAEpB,OAF0D;gBAGhE2B,OAAO,EAAPA;cAHgE,CARpE;cAAA;cAAA,OAcqB9B,qBAAqB,CAAC2B,SAAD,EAAYvB,GAAZ,EAAiB0B,OAAjB,CAd1C;;YAAA;cAcEd,GAAG,CAACC,MAdN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAhI2D;IAAA;EAAA;;EAAA,SAiJ5CgB,YAjJ4C;IAAA;EAAA;;EAAA;IAAA,oFAiJ3D,mBAA4B7B,GAA5B,EAAuDY,GAAvD;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOrB,sBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUV,wEAAA,EAFV;;YAAA;cAKE;cACMiD,UANR,GAM8B9B,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAN7B;cAOQa,WAPR,GAO+B/B,GAAG,CAACkB,MAAL,CAAyB,CAAzB,CAP9B,EAQE;;cACMI,WATR,GASgDtB,GAAG,CAACkB,MAAL,CAA0C,CAA1C,KAAgD,EAT/F,EAWE;cACA;cACA;cACA;cACA;cACA;cACA;;cAEA,IAAIpC,gBAAgB,CAACgD,UAAD,CAAhB,IAAgC,CAAChD,gBAAgB,CAACiD,WAAD,CAArD,EAAoE;gBAC9DC,OAD8D;gBAElEA,OAAO,mEAAP;gBACAA,OAAO,4CAAP;gBACAA,OAAO,uEAAP;gBACCpB,GAAD,CAAaoB,OAAb,GAAuBA,OAAvB;gBAEAjC,OAAO,GAAG+B,UAAV;gBACApB,OAAO,GAAGqB,WAAV;cACD,CATD,MASO;gBACLrB,OAAO,GAAGoB,UAAV;gBACA/B,OAAO,GAAGgC,WAAV;cACD;;cA/BH;cAAA,OAgCkBjC,6BAA6B,CAACC,OAAD,EAAUC,GAAV,CAhC/C;;YAAA;cAgCED,OAhCF;cAkCQwB,SAlCR,mCAmCOD,WAnCP;gBAoCIH,IAAI,EAAEpB,OApCV;gBAqCIyB,IAAI,EAAEd;cArCV,IAwCE;;cAxCF;cAAA,OAyCqBnB,sBAAsB,CAACgC,SAAD,EAAYvB,GAAZ,CAzC3C;;YAAA;cAyCEY,GAAG,CAACC,MAzCN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAjJ2D;IAAA;EAAA;;EAAA,SA6L5CoB,mBA7L4C;IAAA;EAAA;;EAAA;IAAA,2FA6L3D,mBAAmCjC,GAAnC,EAA8DY,GAA9D;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOvB,0BADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUR,wEAAA,EAFV;;YAAA;cAAA;cAAA,OAKgCiB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAuB,CAAvB,CAAD,EAA4BlB,GAA5B,CAL7D;;YAAA;cAKQD,OALR;cAAA;cAAA,OAOqBV,0BAA0B,CAACU,OAAD,EAAUC,GAAV,CAP/C;;YAAA;cAOEY,GAAG,CAACC,MAPN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA7L2D;IAAA;EAAA;;EAAA,SAuM5CqB,cAvM4C;IAAA;EAAA;;EAAA;IAAA,sFAuM3D,mBAA8BlC,GAA9B,EAAyDY,GAAzD;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOxB,qBADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUP,wEAAA,EAFV;;YAAA;cAKQsD,UALR,GAK8BnC,GAAG,CAACkB,MAAL,CAAuB,CAAvB,CAL7B;cAAA;cAAA,OAMgCpB,6BAA6B,CAAEE,GAAG,CAACkB,MAAL,CAAuB,CAAvB,CAAD,EAA4BlB,GAA5B,CAN7D;;YAAA;cAMQD,OANR;cAOQuB,WAPR,GAOgDtB,GAAG,CAACkB,MAAL,CAA0C,CAA1C,KAAgD,EAP/F;cAQQK,SARR,mCASOD,WATP;gBAUIH,IAAI,EAAEpB,OAVV;gBAWIyB,IAAI,EAAEW;cAXV;cAcEvB,GAAG,CAACC,MAAJ,GAAazB,qBAAqB,CAACmC,SAAD,EAAYvB,GAAZ,CAAlC;;YAdF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAvM2D;IAAA;EAAA;;EAAA,SAwN5CoC,eAxN4C;IAAA;EAAA;;EAAA;IAAA,uFAwN3D,mBAA+BpC,GAA/B,EAA0DY,GAA1D;MAAA;QAAA;UAAA;YAAA;cAAA,IACOzB,aADP;gBAAA;gBAAA;cAAA;;cAAA,MAEUN,wEAAA,EAFV;;YAAA;cAIE+B,GAAG,CAACC,MAAJ,GAAa1B,aAAa,CAACa,GAAD,CAA1B;;YAJF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAxN2D;IAAA;EAAA;;EA+N3D,OAAOpB,2DAAwB,CAAC;IAC9B;IACAyD,YAAY,EAAE1D,wDAAqB,CAACgC,cAAD,CAFL;IAG9B2B,eAAe,EAAE3D,wDAAqB,CAACyD,eAAD,CAHR;IAI9BG,YAAY,EAAE5D,wDAAqB,CAACmC,oBAAD,CAJL;IAK9B;IACA0B,mBAAmB,EAAE7D,wDAAqB,CAACoC,eAAD,CANZ;IAO9B0B,mBAAmB,EAAE9D,wDAAqB,CAACyC,eAAD,CAPZ;IAQ9B;IACAsB,QAAQ,EAAE/D,wDAAqB,CAAC0C,OAAD,CATD;IAU9BsB,iBAAiB,EAAEhE,wDAAqB,CAAC8C,aAAD,CAVV;IAW9BmB,oBAAoB,EAAEjE,wDAAqB,CAACgD,eAAD,CAXb;IAY9BkB,oBAAoB,EAAElE,wDAAqB,CAACiD,eAAD,CAZb;IAa9BkB,aAAa,EAAEnE,wDAAqB,CAACkD,YAAD,CAbN;IAc9BkB,0BAA0B,EAAEpE,wDAAqB,CAACsD,mBAAD,CAdnB;IAe9Be,WAAW,EAAErE,wDAAqB,CAACuD,cAAD;EAfJ,CAAD,CAA/B;AAiBD;;;;ACvQD;AAQA;AAGA;AAEO,SAASgB,mBAAT,CAA6BC,gBAA7B,EAAoG;EACzG,IACEjE,WADF,GAYIiE,gBAZJ,CACEjE,WADF;EAAA,IAEEC,aAFF,GAYIgE,gBAZJ,CAEEhE,aAFF;EAAA,IAGEK,kBAHF,GAYI2D,gBAZJ,CAGE3D,kBAHF;EAAA,IAIEC,sBAJF,GAYI0D,gBAZJ,CAIE1D,sBAJF;EAAA,IAKEH,qBALF,GAYI6D,gBAZJ,CAKE7D,qBALF;EAAA,IAMEI,mBANF,GAYIyD,gBAZJ,CAMEzD,mBANF;EAAA,IAOEC,qBAPF,GAYIwD,gBAZJ,CAOExD,qBAPF;EAAA,IAQEC,qBARF,GAYIuD,gBAZJ,CAQEvD,qBARF;EAAA,IASEL,sBATF,GAYI4D,gBAZJ,CASE5D,sBATF;EAAA,IAUEF,0BAVF,GAYI8D,gBAZJ,CAUE9D,0BAVF;EAAA,IAWED,qBAXF,GAYI+D,gBAZJ,CAWE/D,qBAXF;EAaA,IAAMgE,aAAa,GAAGH,kDAAe,CAAC,CACpCrE,2DAAwB,CAAC;IACvByE,WAAW,EAAE;EADU,CAAD,CADY,EAIpCpE,sBAAsB,CAAC;IACrBC,WAAW,EAAXA,WADqB;IAErBC,aAAa,EAAbA,aAFqB;IAGrBK,kBAAkB,EAAlBA,kBAHqB;IAIrBF,qBAAqB,EAArBA,qBAJqB;IAKrBG,sBAAsB,EAAtBA,sBALqB;IAMrBC,mBAAmB,EAAnBA,mBANqB;IAOrBC,qBAAqB,EAArBA,qBAPqB;IAQrBC,qBAAqB,EAArBA,qBARqB;IASrBL,sBAAsB,EAAtBA,sBATqB;IAUrBF,0BAA0B,EAA1BA,0BAVqB;IAWrBD,qBAAqB,EAArBA;EAXqB,CAAD,CAJc,CAAD,CAArC;EAkBA,OAAOgE,aAAP;AACD;AAEM,SAASE,2BAAT,OAAwH;EAAA,IAAjFC,QAAiF,QAAjFA,QAAiF;EAAA,IAAvEC,WAAuE,QAAvEA,WAAuE;;EAAA,SAC9GC,WAD8G;IAAA;EAAA;;EAAA;IAAA,mFAC7H,iBAA2BzD,GAA3B,EAA0EY,GAA1E;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cACQ8C,WADR,GACsB,eAAA1D,GAAG,CAACkB,MAAJ,oDAAYlC,MAAZ,GAAqBgB,GAAG,CAACkB,MAAJ,CAAW,CAAX,CAArB,GAAqCyC,SAD3D;;cAAA,IAEOD,WAFP;gBAAA;gBAAA;cAAA;;cAAA,MAE0B7E,mEAAA,CAA4B,sBAA5B,CAF1B;;YAAA;cAAA,IAGO6E,WAAW,CAACE,OAHnB;gBAAA;gBAAA;cAAA;;cAAA,MAGkC/E,mEAAA,CAA4B,gCAA5B,CAHlC;;YAAA;cAAA,MAIM,CAAC6E,WAAW,CAACG,OAAb,IAAwBH,WAAW,CAACG,OAAZ,CAAoB7E,MAApB,KAA+B,CAJ7D;gBAAA;gBAAA;cAAA;;cAAA,MAIsEH,mEAAA,CAA4B,gCAA5B,CAJtE;;YAAA;cAAA,IAKO6E,WAAW,CAACI,cALnB;gBAAA;gBAAA;cAAA;;cAAA,MAKyCjF,mEAAA,CAA4B,uCAA5B,CALzC;;YAAA;cAAA;cAAA,OAOqB0E,QAAQ,CAACG,WAAD,CAP7B;;YAAA;cAOE9C,GAAG,CAACC,MAPN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAD6H;IAAA;EAAA;;EAAA,SAU9GkD,WAV8G;IAAA;EAAA;;EAAA;IAAA,mFAU7H,kBAA2B/D,GAA3B,EAAoEY,GAApE;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cACQ8C,WADR,GACsB,gBAAA1D,GAAG,CAACkB,MAAJ,sDAAYlC,MAAZ,GAAqBgB,GAAG,CAACkB,MAAJ,CAAW,CAAX,CAArB,GAAqCyC,SAD3D;;cAAA,IAEOD,WAFP;gBAAA;gBAAA;cAAA;;cAAA,MAE0B7E,mEAAA,CAA4B,iBAA5B,CAF1B;;YAAA;cAAA;cAAA,OAGqB2E,WAAW,CAACE,WAAD,CAHhC;;YAAA;cAGE9C,GAAG,CAACC,MAHN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAV6H;IAAA;EAAA;;EAgB7H,OAAOjC,2DAAwB,CAAC;IAC9BoF,uBAAuB,EAAErF,wDAAqB,CAAC8E,WAAD,CADhB;IAE9BQ,0BAA0B,EAAEtF,wDAAqB,CAACoF,WAAD;EAFnB,CAAD,CAA/B;AAID,EAED;;AACO,SAASG,uBAAT,QAA2G;EAAA,IAAxEC,gBAAwE,SAAxEA,gBAAwE;;EAAA,SACjGC,aADiG;IAAA;EAAA;;EAAA;IAAA,qFAChH,kBAA6BpE,GAA7B,EAAyEY,GAAzE;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cACQyD,aADR,GACwB,gBAAArE,GAAG,CAACkB,MAAJ,sDAAYlC,MAAZ,GAAqBgB,GAAG,CAACkB,MAAJ,CAAW,CAAX,CAArB,GAAqCyC,SAD7D;;cAAA,IAEOU,aAFP,aAEOA,aAFP,eAEOA,aAAa,CAAEC,UAFtB;gBAAA;gBAAA;cAAA;;cAAA,MAEwCzF,mEAAA,CAA4B,oBAA5B,CAFxC;;YAAA;cAAA;cAAA,OAGqBsF,gBAAgB,CAACE,aAAD,CAHrC;;YAAA;cAGEzD,GAAG,CAACC,MAHN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CADgH;IAAA;EAAA;;EAOhH,OAAOjC,2DAAwB,CAAC;IAC9B2F,oBAAoB,EAAE5F,wDAAqB,CAACyF,aAAD;EADb,CAAD,CAA/B;AAGD,EAED;;ACnFA;AACA;AAGO,SAASK,uBAAT,CAAiCb,OAAjC,EAAoF;EACzF,OAAO,UAAC5D,GAAD,EAA4BY,GAA5B,EAAuD8D,IAAvD,EAAqFC,GAArF,EAAoH;IACzH,IAAI3E,GAAG,CAAC4E,MAAJ,KAAe,aAAnB,EAAkC;MAChChE,GAAG,CAACC,MAAJ,GAAa+C,OAAb;MACA,OAAOe,GAAG,EAAV;IACD;;IACD,OAAOD,IAAI,EAAX;EACD,CAND;AAOD;AAEM,SAASG,8BAAT,CAAwCC,cAAxC,EAA6G;EAClH,OAAO,UAAC9E,GAAD,EAA4BY,GAA5B,EAAkE8D,IAAlE,EAAgGC,GAAhG,EAA+H;IACpI,IAAI3E,GAAG,CAAC4E,MAAJ,KAAe,qBAAnB,EAA0C;MACxChE,GAAG,CAACC,MAAJ,GAAaiE,cAAb;MACA,OAAOH,GAAG,EAAV;IACD;;IACD,OAAOD,IAAI,EAAX;EACD,CAND;AAOD;AAEM,SAASK,mBAAT,CAA6BD,cAA7B,EAGL;EACA,IAAQlB,OAAR,GAA+BkB,cAA/B,CAAQlB,OAAR;EAAA,IAAiBoB,SAAjB,GAA+BF,cAA/B,CAAiBE,SAAjB;EACA,IAAMC,eAAe,GAAGT,0DAAqB,CAAC;IAAEQ,SAAS,EAATA;EAAF,CAAD,CAA7C;EACA,IAAME,iBAAiB,GAAGjC,kDAAe,CAAC,CAACwB,uBAAuB,CAACb,OAAD,CAAxB,EAAmCiB,8BAA8B,CAACC,cAAD,CAAjE,EAAmFG,eAAnF,CAAD,CAAzC;EACA,OAAO;IAAEC,iBAAiB,EAAjBA,iBAAF;IAAqBD,eAAe,EAAfA;EAArB,CAAP;AACD;;;;AC7BD;AAIO,SAASE,mBAAT,OAA0F;EAAA,IAA3DC,SAA2D,QAA3DA,SAA2D;EAC/F,OAAO;IACLjG,aAAa;MAAA,yFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACPN,wEAAA,EADO;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GADR;IAILK,WAAW;MAAA,uFAAE,kBAAOmG,CAAP;QAAA;QAAA;UAAA;YAAA;cAAA;gBACHpF,QADG,GACUmF,SADV,CACHnF,QADG;;gBAAA,MAEPA,QAAQ,IAAIA,QAAQ,CAACjB,MAFd;kBAAA;kBAAA;gBAAA;;gBAAA,kCAGFiB,QAHE;;cAAA;gBAAA,MAKL,IAAIJ,KAAJ,CAAU,wBAAV,CALK;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAJN;IAWLL,kBAAkB;MAAA,8FAAE,kBAAOyB,QAAP,EAAoCoE,CAApC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACGD,SAAS,CAACrE,eAAV,CAA0BE,QAA1B,CADH;;cAAA;gBACZJ,MADY;gBAAA,kCAEXA,MAFW;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAXb;IAeLpB,sBAAsB;MAAA,kGAAE,kBAAOwB,QAAP,EAAoCoE,CAApC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACDD,SAAS,CAAChE,eAAV,CAA0BH,QAA1B,CADC;;cAAA;gBAChBJ,MADgB;gBAAA,kCAEfA,MAFe;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAfjB;IAmBLvB,qBAAqB;MAAA,iGAAE,kBAAOiC,SAAP,EAAyC8D,CAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACAD,SAAS,CAACE,WAAV,CAAsB,CAAC/D,SAAS,CAACJ,IAAX,EAAiBI,SAAS,CAACC,IAA3B,CAAtB,CADA;;cAAA;gBACfX,MADe;gBAAA,kCAEdA,MAFc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAnBhB;IAuBLtB,sBAAsB;MAAA,kGAAE,kBAAOgC,SAAP,EAAyC8D,CAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACDD,SAAS,CAACG,mBAAV,CAA8B,CAAChE,SAAS,CAACC,IAAX,EAAiBD,SAAS,CAACJ,IAA3B,CAA9B,CADC;;cAAA;gBAChBN,MADgB;gBAAA,kCAEfA,MAFe;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAvBjB;IA2BLnB,mBAAmB;MAAA,+FAAE,kBAAO6B,SAAP,EAA8C8D,CAA9C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACED,SAAS,CAAC3D,aAAV,CAAwB,CAACF,SAAS,CAACJ,IAAX,EAAiBI,SAAS,CAACC,IAA3B,CAAxB,CADF;;cAAA;gBACbX,MADa;gBAAA,kCAEZA,MAFY;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GA3Bd;IA+BLlB,qBAAqB;MAAA,gGAAE,kBAAO4B,SAAP;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA6D,SAAS,CAAC3D,aAAV,CAAwB,CAACF,SAAS,CAACJ,IAAX,EAAiBI,SAAS,CAACC,IAA3B,CAAxB,CADA;;cAAA;gBACfX,MADe;gBAAA,kCAEdA,MAFc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GA/BhB;IAmCLjB,qBAAqB;MAAA,iGAAE,kBAAO2B,SAAP;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA6D,SAAS,CAAC3D,aAAV,CAAwB,CAACF,SAAS,CAACJ,IAAX,EAAiBI,SAAS,CAACC,IAA3B,CAAxB,CADA;;cAAA;gBACfX,MADe;gBAAA,kCAEdA,MAFc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAnChB;IAuCLxB,0BAA0B;MAAA,sGAAE,mBAAOgG,CAAP;QAAA;UAAA;YAAA;cAAA;gBAAA,MACpBxG,wEAAA,EADoB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAvCrB;IA0CLO,qBAAqB,EAAE,+BAACiG,CAAD,EAAsC;MAC3D,MAAMxG,wEAAA,EAAN;IACD;EA5CI,CAAP;AA8CD;;;;;;;;;;;;;;;;;;;;;ACtDD;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAUO,IAAMoH,qBAAb;EAAA;;EAAA;;EAGE,qCAAsI;IAAA;;IAAA,IAAxHC,MAAwH,QAAxHA,MAAwH;IAAA,IAAhHC,KAAgH,QAAhHA,KAAgH;IAAA,IAAzGf,SAAyG,QAAzGA,SAAyG;;IAAA;;IACpI,0BAAM;MACJc,MAAM,EAAE;QAAEE,WAAW,EAAE,0EAAKF,MAAM,CAACE,WAAd;UAA2BC,cAAc,EAAEX,4CAAuBY;QAAlE,EAAb;QAAmFC,iBAAiB,EAAE,CAAC,CAACL,MAAM,CAACK;MAA/G,CADJ;MAEJJ,KAAK,EAAE,0EAAMA,KAAK,IAAI,EAAjB;QAAsBvC,OAAO,EAAE,SAA/B;QAA0C3D,QAAQ,EAAE;MAApD;IAFD,CAAN;;IADoI,8EAF/F,IAE+F;;IAKpI,MAAKmF,SAAL,GAAiBA,SAAS,IAAI,IAA9B;IALoI;EAMrI;;EATH;IAAA;IAAA;MAAA,kFAqBE;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKA,SADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAEUvG,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,4EAAX;kBAAyFgG,IAAI,EAAE;gBAA/F,CAA1B,CAFV;;cAAA;gBAAA;gBAAA,OAGQ,KAAKC,aAAL,CAAmB,KAAKvB,SAAxB,CAHR;;cAAA;gBAAA,iCAIS,KAAKwB,oBAAL,CAA0BC,OAA1B,CAAkC;kBAAEjC,MAAM,EAAE;gBAAV,CAAlC,CAJT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CArBF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFA4BE,kBAA2BQ,SAA3B;QAAA;UAAA;YAAA;cAAA;gBACE,KAAK0B,sBAAL,CAA4B1B,SAA5B;gBADF;gBAAA,OAEQ,KAAK2B,WAAL,CAAiB3B,SAAjB,CAFR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CA5BF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAiCE;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAA2BxB,OAA3B,SAA2BA,OAA3B,yBAAoCL,QAApC,EAAoCA,QAApC,+BAA+C,IAA/C,wCAAqDyD,MAArD,EAAqDA,MAArD,6BAA8D,IAA9D;;gBAAA,IACO,KAAK5B,SADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAEUvG,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,4EAAX;kBAAyFgG,IAAI,EAAE;gBAA/F,CAA1B,CAFV;;cAAA;gBAGQO,kBAHR,GAG6B,KAAKtB,cAAL,CAAoB/B,OAApB,CAH7B;gBAIE,KAAKsD,MAAL,CAAY;kBACVtD,OAAO,EAAE;gBADC,CAAZ;gBAGQoB,SAPV,GAOqCiC,kBAPrC,CAOUjC,SAPV,EAOqBmC,WAPrB,GAOqCF,kBAPrC,CAOqBE,WAPrB;;gBAAA,KAQM5D,QARN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA;gBAAA,OAUY,KAAK6B,SAAL,CAAegC,iBAAf,CAAiC;kBACrCxC,MAAM,EAAE,yBAD6B;kBAErC1D,MAAM,EAAE,CAAC;oBAAE0C,OAAO,EAAPA,OAAF;oBAAWyD,SAAS,EAAEF,WAAtB;oBAAmCtD,OAAO,EAAE,CAACmB,SAAD;kBAA5C,CAAD;gBAF6B,CAAjC,CAVZ;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAeMa,8BAAA;;cAfN;gBAAA;gBAAA;gBAAA,OAoBU,KAAKT,SAAL,CAAegC,iBAAf,CAAiC;kBACrCxC,MAAM,EAAE,4BAD6B;kBAErC1D,MAAM,EAAE,CAAC;oBAAE0C,OAAO,EAAPA;kBAAF,CAAD;gBAF6B,CAAjC,CApBV;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAyBIiC,8BAAA,eAzBJ,CA0BI;gBACA;;gBA3BJ,MA4BQ,aAAMnF,OAAN,KAAkB,qCA5B1B;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAiCE,KAAK6G,SAAL,CAAe;kBAAEnB,WAAW,EAAEa;gBAAf,CAAf;;gBAjCF,KAkCMD,MAlCN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAkCoB,KAAKQ,aAAL,CAAmB,KAAKpC,SAAxB,CAlCpB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAjCF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oFAsEE,kBAAegB,WAAf;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKhB,SADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAC6BU,uDAAA,CAAmC,iCAAnC,CAD7B;;cAAA;gBAEUd,SAFV,GAEqCoB,WAFrC,CAEUpB,SAFV,EAEqBmC,WAFrB,GAEqCf,WAFrC,CAEqBe,WAFrB;gBAAA;gBAAA;gBAAA,OAKU,KAAK/B,SAAL,CAAegC,iBAAf,CAAiC;kBACrCxC,MAAM,EAAE,yBAD6B;kBAErC1D,MAAM,EAAE,CAAC;oBAAE0C,OAAO,EAAEwC,WAAW,CAACxC,OAAvB;oBAAgCyD,SAAS,EAAEF,WAA3C;oBAAwDtD,OAAO,EAAE,CAACmB,SAAD;kBAAjE,CAAD;gBAF6B,CAAjC,CALV;;cAAA;gBASI,sGAAeoB,WAAf;;gBATJ;gBAAA;;cAAA;gBAAA;gBAAA;gBAWIP,8BAAA;gBAXJ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAtEF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAsFE,kBAA8BT,SAA9B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACOA,SAAS,CAACsC,SADjB;kBAAA;kBAAA;gBAAA;;gBAAA,MACkC3B,uDAAA,CAAmC,2CAAnC,CADlC;;cAAA;gBAAA,IAEO,KAAKS,QAFZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAE4B3H,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,6BAAX;kBAA0CgG,IAAI,EAAE;gBAAhD,CAA1B,CAF5B;;cAAA;gBAGU9C,OAHV,GAGsB,KAAKsC,MAAL,CAAYE,WAHlC,CAGUxC,OAHV;gBAIQgE,mBAJR,GAI8BhC,oCAAW,CAACR,SAAS,CAACxB,OAAV,CAAkBiE,QAAlB,EAAD,CAAX,GAA4CzC,SAAS,CAACxB,OAAtD,eAAqEwB,SAAS,CAACxB,OAAV,CAAkBiE,QAAlB,CAA2B,EAA3B,CAArE,CAJ9B;;gBAAA,MAKMjE,OAAO,KAAKgE,mBALlB;kBAAA;kBAAA;gBAAA;;gBAAA,MAMU9B,iEAAA,4CAAiF8B,mBAAjF,yBAAmHhE,OAAnH,EANV;;cAAA;gBAQE,KAAK4C,QAAL,CAAcuB,IAAd,CAAmB,SAAnB,EAA8B;kBAAEnE,OAAO,EAAPA;gBAAF,CAA9B;gBACA,KAAK4C,QAAL,CAAcuB,IAAd,CAAmB,cAAnB,EAAmC,KAAK5B,KAAL,CAAWvC,OAA9C;gBATF,kCAUSgE,mBAVT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAtFF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAmGE,kBAA0BxC,SAA1B;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACQjC,gBADR,GAC2BgC,mBAAmB,CAAC;kBAAEC,SAAS,EAATA;gBAAF,CAAD,CAD9C;gBAEE,KAAK8B,MAAL,CAAY;kBACVjH,QAAQ,EAAEmF,SAAS,CAACnF,QAAV,IAAsB;gBADtB,CAAZ;gBAGMmD,aALR,GAKwBF,mBAAmB,CAACC,gBAAD,CAL3C;gBAMQ6E,MANR,GAMiB,IAAIvC,yCAAJ,EANjB;gBAAA,uBAOgCV,mBAAmB,CAAC,KAAKmB,MAAL,CAAYE,WAAb,CAPnD,EAOUlB,iBAPV,wBAOUA,iBAPV;gBAQE8C,MAAM,CAACC,IAAP,CAAY7E,aAAZ;gBACA4E,MAAM,CAACC,IAAP,CAAY/C,iBAAZ;gBACMsB,QAVR,GAUmBhB,uDAAkB,CAACwC,MAAD,CAVrC;gBAWE,KAAKE,yBAAL,CAA+B1B,QAA/B;;gBAXF,IAYO,KAAKN,MAAL,CAAYK,iBAZnB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAY4C,KAAKiB,aAAL,CAAmBpC,SAAnB,CAZ5C;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAnGF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,kGAkHE,kBAAqCA,SAArC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACEA,SAAS,CAAC+C,EAAV,CAAa,gBAAb;kBAAA,gFAA+B,kBAAOb,KAAP,EAA4Bc,OAA5B;oBAAA;;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA,IACxB,MAAI,CAAC5B,QADmB;8BAAA;8BAAA;4BAAA;;4BAAA,MACHT,uDAAA,CAAmC,2CAAnC,CADG;;0BAAA;4BAAA,KAEzBuB,KAFyB;8BAAA;8BAAA;4BAAA;;4BAG3B,MAAI,CAACd,QAAL,CAAcuB,IAAd,CAAmB,OAAnB,EAA4BT,KAA5B;;4BAH2B;;0BAAA;4BAAA,mBAMuFc,OAAO,CAAClH,MAAR,CAAe,CAAf,CANvF,EAMrBjB,QANqB,oBAMrBA,QANqB,EAMFoI,gBANE,oBAMXzE,OANW,EAMgB0E,MANhB,oBAMgBA,MANhB,EAO7B;;4BACA,IAAIrI,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAEjB,MAAV,IAAoB,MAAI,CAACmH,KAAL,CAAWlG,QAAX,CAAoB,CAApB,MAA2BA,QAAQ,CAAC,CAAD,CAA3D,EAAgE;8BAC9D,MAAI,CAACiH,MAAL,CAAY;gCACVjH,QAAQ,EAARA;8BADU,CAAZ,EAD8D,CAI9D;;;8BACA,MAAI,CAACuG,QAAL,CAAcuB,IAAd,CAAmB,iBAAnB,EAAsC9H,QAAtC;4BACD;;4BACK2H,mBAfuB,eAeIS,gBAAgB,CAACR,QAAjB,CAA0B,EAA1B,CAfJ,GAgB7B;;4BAhB6B,MAiBzBQ,gBAAgB,IAAI,MAAI,CAAClC,KAAL,CAAWvC,OAAX,KAAuBgE,mBAjBlB;8BAAA;8BAAA;4BAAA;;4BAkBrBW,WAlBqB,GAkBP5C,uCAAc,CAACD,4CAAD,EAA0B2C,gBAA1B,CAAd,IAA6D,EAlBtD,EAmB3B;;4BACA,MAAI,CAACd,SAAL,CAAe;8BACbnB,WAAW,EAAE,0EAAKmC,WAAP;gCAAoB3E,OAAO,EAAEgE,mBAA7B;gCAAkD5C,SAAS,EAAEsD,MAA7D;gCAAqEjC,cAAc,EAAEX,4CAAuBY;8BAA5G;4BADE,CAAf;;4BApB2B;4BAAA,OAuBrB,MAAI,CAACS,WAAL,CAAiB3B,SAAjB,CAvBqB;;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAA/B;;kBAAA;oBAAA;kBAAA;gBAAA;;cADF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAlHF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;;EAAA;AAAA,EAA2CY,0CAA3C;;yBAAaC;kFAWyB,kBAAO/E,MAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YAK5BsH,eAL4B,GAKV,IAAIvC,qBAAJ,CAA0B;cAAEC,MAAM,EAAE;gBAAEE,WAAW,EAAElF,MAAM,CAACkF,WAAtB;gBAAmCG,iBAAiB,EAAErF,MAAM,CAACqF;cAA7D;YAAV,CAA1B,CALU;YAAA;YAAA,OAM5BiC,eAAe,CAAC7B,aAAhB,CAA8BzF,MAAM,CAACkE,SAArC,CAN4B;;UAAA;YAAA,kCAO3BoD,eAP2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;;;;;;;;AE9BtC,MAAM,kBAA4B;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,wCAA4B;;ACAlC,MAAM,sBAA4B;;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,+BAA4B;;;ACAlC,MAAM,mCAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC;AACA;AAaA;AACA,IAAMG,yBAAyB,GAAG,IAAIF,iCAAJ,CAAc,MAAd,CAAlC;AACA,IAAMG,0BAA0B,GAAG,IAAIH,iCAAJ,CAAc,KAAd,CAAnC;AACA,IAAMI,yBAAyB,GAAG,IAAIJ,iCAAJ,CAAc,GAAd,CAAlC,EAEA;;AACA,IAAMK,WAA0E,GAAG;EACjFC,GAAG,EAAE,aAACC,CAAD;IAAA,OAA4B,OAAOA,CAAP,KAAa,QAAb,GAAwB,IAAIP,iCAAJ,CAAcC,2DAAc,CAACM,CAAD,CAA5B,EAAiC,EAAjC,CAAxB,GAA+D,IAAIP,iCAAJ,CAAcO,CAAd,EAAiB,EAAjB,CAA3F;EAAA,CAD4E;EAEjFC,GAAG,EAAE,aAACD,CAAD;IAAA,OAA2B,IAAIP,iCAAJ,CAAcO,CAAd,EAAiB,EAAjB,CAA3B;EAAA;AAF4E,CAAnF;AAIA,IAAME,wBAAqE,GAAG;EAC5EC,GAAG,EAAE,aAACC,SAAD;IAAA,OAAeA,SAAS,CAACC,GAAV,CAAcV,yBAAd,CAAf;EAAA,CADuE;EAE5EW,IAAI,EAAE,cAACF,SAAD;IAAA,OAAeA,SAAS,CAACC,GAAV,CAAcT,0BAAd,CAAf;EAAA,CAFsE;EAG5EW,GAAG,EAAE,aAACH,SAAD;IAAA,OAAeA,SAAS,CAACC,GAAV,CAAcR,yBAAd,CAAf;EAAA;AAHuE,CAA9E;AAKA,IAAMW,uBAAoE,GAAG;EAC3EL,GAAG,EAAE,aAACC,SAAD;IAAA,OAAeA,SAAS,CAACK,KAAV,CAAgBd,yBAAhB,EAA2Ce,EAA3C,CAA8C,CAA9C,EAAiDjB,+CAAjD,CAAf;EAAA,CADsE;EAE3Ea,IAAI,EAAE,cAACF,SAAD;IAAA,OAAeA,SAAS,CAACK,KAAV,CAAgBb,0BAAhB,EAA4Cc,EAA5C,CAA+C,CAA/C,EAAkDjB,+CAAlD,CAAf;EAAA,CAFqE;EAG3Ec,GAAG,EAAE,aAACH,SAAD;IAAA,OAAeA,SAAS,CAACK,KAAV,CAAgBZ,yBAAhB,EAA2Ca,EAA3C,CAA8C,CAA9C,EAAiDjB,+CAAjD,CAAf;EAAA;AAHsE,CAA7E;AAKA,IAAMmB,UAAoD,GAAG;EAC3Db,GAAG,EAAE,aAACC,CAAD;IAAA,OAAOA,CAAC,CAACnB,QAAF,CAAW,EAAX,CAAP;EAAA,CADsD;EAE3DoB,GAAG,EAAE,aAACD,CAAD;IAAA,OAAO,IAAIP,iCAAJ,CAAcO,CAAd,EAAiBnB,QAAjB,CAA0B,EAA1B,CAAP;EAAA;AAFsD,CAA7D;;AAKA,IAAMgC,SAAS,GAAG,SAAZA,SAAY,CAAC3I,MAAD,EAAgD;EAChE,IAAQ4I,KAAR,GAAsG5I,MAAtG,CAAQ4I,KAAR;EAAA,IAAeC,eAAf,GAAsG7I,MAAtG,CAAe6I,eAAf;EAAA,IAAgCC,gBAAhC,GAAsG9I,MAAtG,CAAgC8I,gBAAhC;EAAA,IAAkDC,aAAlD,GAAsG/I,MAAtG,CAAkD+I,aAAlD;EAAA,IAAiEC,cAAjE,GAAsGhJ,MAAtG,CAAiEgJ,cAAjE;EAAA,IAAiFC,gBAAjF,GAAsGjJ,MAAtG,CAAiFiJ,gBAAjF;EACA,IAAIC,cAAkC,GAAGtB,WAAW,CAACiB,eAAD,CAAX,CAA6BD,KAA7B,CAAzC;;EAEA,IAAIE,gBAAJ,EAAsB;IACpBI,cAAc,GAAGlB,wBAAwB,CAACc,gBAAD,CAAxB,CAA2CI,cAA3C,CAAjB;EACD;;EAED,IAAIF,cAAJ,EAAoB;IAClBE,cAAc,GAAGZ,uBAAuB,CAACU,cAAD,CAAvB,CAAwCE,cAAxC,CAAjB;EACD;;EAED,IAAID,gBAAJ,EAAsB;IACpBC,cAAc,GAAIA,cAAD,CAA8BV,EAA9B,CAAiCS,gBAAjC,EAAmD1B,iDAAnD,CAAjB;EACD;;EAED,IAAIwB,aAAJ,EAAmB;IACjBG,cAAc,GAAGR,UAAU,CAACK,aAAD,CAAV,CAA0BG,cAA1B,CAAjB;EACD;;EACD,OAAOA,cAAP;AACD,CApBD;;AAsBA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CACrBR,KADqB,QAGE;EAAA,gCADrBC,eACqB;EAAA,IADrBA,eACqB,qCADH,KACG;EAAA,IADIE,aACJ,QADIA,aACJ;EAAA,IADmBD,gBACnB,QADmBA,gBACnB;EAAA,IADqCE,cACrC,QADqCA,cACrC;EAAA,IADqDC,gBACrD,QADqDA,gBACrD;EACvB,OAAON,SAAS,CAAC;IACfE,eAAe,EAAfA,eADe;IAEfE,aAAa,EAAbA,aAFe;IAGfD,gBAAgB,EAAhBA,gBAHe;IAIfE,cAAc,EAAdA,cAJe;IAKfC,gBAAgB,EAAhBA,gBALe;IAMfL,KAAK,EAAEA,KAAK,IAAI;EAND,CAAD,CAAhB;AAQD,CAZD;;AAcA,SAASS,eAAT,CAAyBC,OAAzB,EAA8D;EAC5D,OAAOF,cAAc,CAACE,OAAD,EAAU;IAC7BT,eAAe,EAAE,KADY;IAE7BE,aAAa,EAAE,KAFc;IAG7BD,gBAAgB,EAAE,MAHW;IAI7BE,cAAc,EAAE;EAJa,CAAV,CAArB;AAMD;;AAED,SAASO,eAAT,CAAyBD,OAAzB,EAA8D;EAC5D,OAAOF,cAAc,CAACE,OAAD,EAAU;IAC7BT,eAAe,EAAE,KADY;IAE7BE,aAAa,EAAE,KAFc;IAG7BD,gBAAgB,EAAE,KAHW;IAI7BE,cAAc,EAAE;EAJa,CAAV,CAArB;AAMD;;;;;;;;;;;;;AC3FD;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGO,SAASe,2BAAT,CAAqCjC,CAArC,EAAoE;EACzE,IAAMkC,cAAc,GAAGX,eAAe,CAACvB,CAAD,CAAtC;EACA,IAAMmC,YAAY,GAAGV,eAAe,CAACS,cAAD,CAApC;EACA,OAAOC,YAAP;AACD;AAEM,SAAeC,wBAAtB;EAAA;AAAA;AAwBA;AACA;AACA;AACA;;;kGA3BO,iBAAwCC,GAAxC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACmBR,oCAAG,CAAiBQ,GAAjB,CADtB;;UAAA;YACCC,SADD;YAECC,mBAFD,6CAGAD,SAHA;cAIHE,gBAAgB,EAAEP,2BAA2B,CAACK,SAAS,CAACE,gBAAX,CAJ1C;cAKHC,GAAG,EAAE,0CACAH,SAAS,CAACG,GADZ;gBAEDC,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACG,GAAV,CAAcC,6BAAf,CAFzD;gBAGDC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACG,GAAV,CAAcE,qBAAf;cAHjD,EALA;cAUHC,MAAM,EAAE,0CACHN,SAAS,CAACM,MADT;gBAEJF,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACM,MAAV,CAAiBF,6BAAlB,CAFtD;gBAGJC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACM,MAAV,CAAiBD,qBAAlB;cAH9C,EAVH;cAeHE,IAAI,EAAE,0CACDP,SAAS,CAACO,IADX;gBAEFH,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACO,IAAV,CAAeH,6BAAhB,CAFxD;gBAGFC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACO,IAAV,CAAeF,qBAAhB;cAHhD;YAfD;YAAA,iCAqBEJ,mBArBF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;;;AA4BA,SAAeO,4BAAtB;EAAA;AAAA;;;sGAAO,kBAA4CT,GAA5C;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACgBR,oCAAG,CAIrBQ,GAJqB,EAIhB;cACNU,QAAQ,EAAEV,GADJ;cAENW,cAAc,EAAE,4BAFV;cAGNpH,MAAM,EAAE,KAHF;cAINqH,IAAI,EAAE;YAJA,CAJgB,CADnB;;UAAA;YACCpL,MADD;YAAA,kCAWE;cACL4K,GAAG,EAAE5K,MAAM,CAACqL,YADP;cAELN,MAAM,EAAE/K,MAAM,CAACsL,eAFV;cAGLN,IAAI,EAAEhL,MAAM,CAACuL;YAHR,CAXF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;;;AAkBA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,UAAD,EAA0CC,aAA1C,EAAoE;EAAA;;EAC5G,IAAI;IACFzB,4BAAA,CAAUwB,UAAU,IAAI,iBAAOA,UAAP,MAAsB,QAA9C,EAAwD,2BAAxD;IACAxB,4BAAA,CAAU,UAAUwB,UAApB,EAAgC,qCAAhC;IACAxB,4BAAA,CAAU,UAAUwB,UAApB,EAAgC,qCAAhC;IACAxB,4BAAA,CACE,OAAOwB,UAAU,CAACnL,IAAlB,KAA2B,QAA3B,IAAuC4J,2DAAc,CAACuB,UAAU,CAACnL,IAAZ,CADvD,EAEE,+EAFF;IAIA,IAAIK,IAAI,GAAG,IAAX;IACA,IAAIoC,OAAO,GAAG,IAAd;;IACA,QAAS0I,UAAD,CAA4C5K,OAApD;MACE,KAAKgJ,oDAAL;QACE,IAAI,OAAO4B,UAAU,CAAC9K,IAAlB,KAA2B,QAA/B,EAAyC;UACvCsJ,sCAAA,CAAoB,YAAM;YACxBtJ,IAAI,GAAGmL,IAAI,CAACC,KAAL,CAAWN,UAAU,CAAC9K,IAAtB,CAAP;UACD,CAFD,EAEG,qCAFH;QAGD,CAJD,MAIO;UACL;UACAA,IAAI,GAAG8K,UAAU,CAAC9K,IAAlB;QACD;;QACDsJ,4BAAA,CAAU+B,KAAK,CAACC,OAAN,CAActL,IAAd,CAAV,EAA0C,+BAA1C;QACAsJ,sCAAA,CAAoB,YAAM;UACxBF,mDAAkB,CAACpJ,IAAD,CAAlB;QACD,CAFD,EAEG,gDAFH;QAGA;;MACF,KAAKkJ,oDAAL;MACA,KAAKA,oDAAL;QACE,IAAI,OAAO4B,UAAU,CAAC9K,IAAlB,KAA2B,QAA/B,EAAyC;UACvCsJ,sCAAA,CAAoB,YAAM;YACxBtJ,IAAI,GAAGmL,IAAI,CAACC,KAAL,CAAWN,UAAU,CAAC9K,IAAtB,CAAP;UACD,CAFD,EAEG,qCAFH;QAGD,CAJD,MAIO;UACL;UACAA,IAAI,GAAG8K,UAAU,CAAC9K,IAAlB;QACD;;QAEDsJ,4BAAA,CAAUtJ,IAAI,CAACyL,WAAL,IAAoBzL,IAAI,CAAC0L,KAAnC,8BAA8D1L,IAAI,CAACyL,WAAnE;QACA,IAAME,UAAU,GAAGnC,sCAAA,CAAoBxJ,IAApB,EAA0BmJ,4DAA1B,CAAnB;QACAG,qCAAA,CAAmBqC,UAAU,CAACI,MAAX,CAAkBvO,MAArC,EAA6C,CAA7C,EAAgD,wEAAhD;QACA4E,OAAO,mBAAGpC,IAAI,CAACgM,MAAR,iDAAG,aAAa5J,OAAvB;;QACA,IAAIA,OAAJ,EAAa;UACXkH,4BAAA,CAAU,CAAC2C,MAAM,CAACC,KAAP,CAAanB,aAAb,CAAX,+CAA6E3I,OAA7E;;UACA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;YAC/BA,OAAO,GAAG6J,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyBgC,oCAAW,CAAChC,OAAD,CAAX,GAAuB,EAAvB,GAA4B,EAArD,CAAV;UACD;;UACDkH,qCAAA,CAAmBlH,OAAnB,EAA4B2I,aAA5B,+BAAgE3I,OAAhE,gDAA2G2I,aAA3G;QACD;;QACD;;MACF;QACEzB,8BAAA,wCAA4CwB,UAAD,CAA4C5K,OAAvF;IAvCJ;EAyCD,CAnDD,CAmDE,OAAO4F,KAAP,EAAc;IACd,MAAMzI,kEAAA,CAA2B;MAC/B6B,OAAO,EAAE4G,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE5G;IADe,CAA3B,CAAN;EAGD;AACF,CAzDM;;;;;;;;;;ACjEP;AACA;AAWA;AAEA;AACA;AACA;AAIA;;SAEewN;;;;;gFAAf,mBAAsBjN,QAAtB,EAAsEkN,OAAtE,EAAuFC,WAAvF;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAC8BA,WAAW,CAACC,iBAAZ,CAA8BpN,QAA9B,CAD9B;;UAAA;YACQqN,aADR;YAAA;YAAA,OAEuBF,WAAW,CAACG,sBAAZ,EAFvB;;UAAA;YAEQC,MAFR;YAGQC,aAHR,GAGwBX,gDAAA,CAA8BQ,aAA9B,EAA6C;cACjEE,MAAM,EAANA;YADiE,CAA7C,CAHxB;YAMQG,QANR,GAMmBF,aAAa,CAACG,IAAd,CAAmBC,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CAAnB,EAAgDW,SAAhD,EANnB;YAAA,mCAOSH,QAPT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;;;AAUO,SAASxJ,sCAAT,OAQe;EAAA,IAPpBiJ,WAOoB,QAPpBA,WAOoB;EAAA,IANpBD,OAMoB,QANpBA,OAMoB;EAAA,IALpBY,sBAKoB,QALpBA,sBAKoB;EACpB,OAAO;IACL7P,WAAW;MAAA,uFAAE,iBAAOmG,CAAP;QAAA;UAAA;YAAA;cAAA;gBAAA,iCAAmC,aAAM4I,6DAAgB,CAACY,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CAAD,CAAhB,CAA8CtG,QAA9C,CAAuD,KAAvD,CAAN,EAAnC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GADN;IAEL1I,aAAa;MAAA,yFAAE,kBAAOkG,CAAP;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAAmC8I,OAAnC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAFR;IAGL3O,kBAAkB;MAAA,8FAAE,kBAAOyB,QAAP,EAAuDoE,CAAvD;QAAA;QAAA;UAAA;YAAA;cAAA;gBACZ2J,mBADY,GACUD,sBAAsB,EADhC;;gBAAA,IAEbC,mBAFa;kBAAA;kBAAA;gBAAA;;gBAAA,MAGVnQ,iEAAA,CAA0B;kBAC9B6B,OAAO,EAAE,6BADqB;kBAE9BgG,IAAI,EAAE;gBAFwB,CAA1B,CAHU;;cAAA;gBAAA;gBAAA,OAOKwH,MAAM,CAACjN,QAAD,EAAWkN,OAAX,EAAoBC,WAApB,CAPX;;cAAA;gBAOZO,QAPY;gBAAA;gBAAA,OAQGK,mBAAmB,CAACnI,OAApB,CAA8C;kBACjEjC,MAAM,EAAE,wBADyD;kBAEjE1D,MAAM,EAAE,CAAC,KAAK+N,MAAL,CAAYN,QAAQ,CAAC9G,QAAT,CAAkB,KAAlB,CAAZ,CAAD;gBAFyD,CAA9C,CARH;;cAAA;gBAQZqH,MARY;gBAAA,kCAYXA,MAZW;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAHb;IAiBLzP,sBAAsB;MAAA,kGAAE,kBAAOwB,QAAP,EAAuDoE,CAAvD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAChB2J,mBADgB,GACMD,sBAAsB,EAD5B;;gBAAA,IAEjBC,mBAFiB;kBAAA;kBAAA;gBAAA;;gBAAA,MAGdnQ,iEAAA,CAA0B;kBAC9B6B,OAAO,EAAE,6BADqB;kBAE9BgG,IAAI,EAAE;gBAFwB,CAA1B,CAHc;;cAAA;gBAAA;gBAAA,OAOCwH,MAAM,CAACjN,QAAD,EAAWkN,OAAX,EAAoBC,WAApB,CAPP;;cAAA;gBAOhBO,QAPgB;gBAAA,8CAQVA,QAAQ,CAAC9G,QAAT,CAAkB,KAAlB,CARU;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAjBjB;IA2BLvI,qBAAqB;MAAA,iGAAE,kBAAOiC,SAAP,EAAyC8D,CAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACf8J,aADe,GACC7J,gDAAW,CAAC6I,OAAD,EAAU5M,SAAS,CAACC,IAApB,CADZ;gBAAA,kCAEd2N,aAFc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GA3BhB;IA+BL5P,sBAAsB;MAAA,kGAAE,kBAAOgC,SAAP,EAAyC8D,CAAzC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAChB+J,aADgB,GACAP,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CADA;gBAEhBkB,GAFgB,GAEVxN,6CAAY,CAAC;kBAAEyC,UAAU,EAAE8K,aAAd;kBAA6B5N,IAAI,EAAED,SAAS,CAACC;gBAA7C,CAAD,CAFF;gBAAA,kCAGf6N,GAHe;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GA/BjB;IAoCL3P,mBAAmB;MAAA,+FAAE,kBAAO6B,SAAP,EAA8C8D,CAA9C;QAAA;QAAA;UAAA;YAAA;cAAA;gBACnBQ,8BAAA,CAAU,qBAAV,EAAiCtE,SAAjC;gBACM6N,aAFa,GAEGP,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CAFH;gBAGba,mBAHa,GAGSD,sBAAsB,EAH/B;;gBAAA,IAIdC,mBAJc;kBAAA;kBAAA;gBAAA;;gBAAA,MAKXnQ,iEAAA,CAA0B;kBAC9B6B,OAAO,EAAE,6BADqB;kBAE9BgG,IAAI,EAAE;gBAFwB,CAA1B,CALW;;cAAA;gBAAA;gBAAA,OASGsI,mBAAmB,CAACnI,OAApB,CAA6C;kBAAEjC,MAAM,EAAE;gBAAV,CAA7C,CATH;;cAAA;gBASbhB,OATa;gBAUb2L,YAVa,GAUE9B,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyBgC,oCAAW,CAAChC,OAAD,CAAX,GAAuB,EAAvB,GAA4B,EAArD,CAVF;gBAWb1C,MAXa,uEAYdK,SAZc;kBAajBG,OAAO,EAAEgJ,oDAAuB+B;gBAbf;gBAenBJ,0BAA0B,CAACnL,MAAD,EAASqO,YAAT,CAA1B;gBACM/N,IAhBa,GAgBN,OAAON,MAAM,CAACM,IAAd,KAAuB,QAAvB,GAAkCmL,IAAI,CAACC,KAAL,CAAW1L,MAAM,CAACM,IAAlB,CAAlC,GAA4DN,MAAM,CAACM,IAhB7D;gBAiBb6N,GAjBa,GAiBP5N,8CAAa,CAAC;kBAAE6C,UAAU,EAAE8K,aAAd;kBAA6B5N,IAAI,EAAJA,IAA7B;kBAAmCE,OAAO,EAAEgJ,oDAAuB+B;gBAAnE,CAAD,CAjBN;gBAAA,kCAkBZ4C,GAlBY;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GApCd;IAwDL1P,qBAAqB;MAAA,gGAAE,kBAAO4B,SAAP,EAAkE8D,CAAlE;QAAA;QAAA;UAAA;YAAA;cAAA;gBACrBQ,8BAAA,CAAU,uBAAV,EAAmCtE,SAAnC;gBACM6N,aAFe,GAECP,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CAFD;gBAGfa,mBAHe,GAGOD,sBAAsB,EAH7B;;gBAAA,IAIhBC,mBAJgB;kBAAA;kBAAA;gBAAA;;gBAAA,MAKbnQ,iEAAA,CAA0B;kBAC9B6B,OAAO,EAAE,6BADqB;kBAE9BgG,IAAI,EAAE;gBAFwB,CAA1B,CALa;;cAAA;gBAAA;gBAAA,OASCsI,mBAAmB,CAACnI,OAApB,CAA6C;kBAAEjC,MAAM,EAAE;gBAAV,CAA7C,CATD;;cAAA;gBASfhB,OATe;gBAUf2L,YAVe,GAUA9B,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyBgC,oCAAW,CAAChC,OAAD,CAAX,GAAuB,EAAvB,GAA4B,EAArD,CAVA;gBAWrByI,0BAA0B,CAAC9K,SAAD,EAAYgO,YAAZ,CAA1B;gBACM/N,IAZe,GAYR,OAAOD,SAAS,CAACC,IAAjB,KAA0B,QAA1B,GAAqCmL,IAAI,CAACC,KAAL,CAAWrL,SAAS,CAACC,IAArB,CAArC,GAAkED,SAAS,CAACC,IAZpE;gBAaf6N,GAbe,GAaT5N,8CAAa,CAAC;kBAAE6C,UAAU,EAAE8K,aAAd;kBAA6B5N,IAAI,EAAJA,IAA7B;kBAAmCE,OAAO,EAAEgJ,oDAAuBqC;gBAAnE,CAAD,CAbJ;gBAAA,kCAcdsC,GAdc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAxDhB;IAwELzP,qBAAqB;MAAA,iGAAE,kBAAO2B,SAAP,EAAkE8D,CAAlE;QAAA;QAAA;UAAA;YAAA;cAAA;gBACrBQ,8BAAA,CAAU,uBAAV,EAAmCtE,SAAnC;gBACM6N,aAFe,GAECP,MAAM,CAAC1N,IAAP,CAAYgN,OAAZ,EAAqB,KAArB,CAFD;gBAGfa,mBAHe,GAGOD,sBAAsB,EAH7B;;gBAAA,IAIhBC,mBAJgB;kBAAA;kBAAA;gBAAA;;gBAAA,MAKbnQ,iEAAA,CAA0B;kBAC9B6B,OAAO,EAAE,6BADqB;kBAE9BgG,IAAI,EAAE;gBAFwB,CAA1B,CALa;;cAAA;gBAAA;gBAAA,OASCsI,mBAAmB,CAACnI,OAApB,CAA6C;kBAAEjC,MAAM,EAAE;gBAAV,CAA7C,CATD;;cAAA;gBASfhB,OATe;gBAUf2L,YAVe,GAUA9B,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyBgC,oCAAW,CAAChC,OAAD,CAAX,GAAuB,EAAvB,GAA4B,EAArD,CAVA;gBAWrByI,0BAA0B,CAAC9K,SAAD,EAAYgO,YAAZ,CAA1B;gBACM/N,IAZe,GAYR,OAAOD,SAAS,CAACC,IAAjB,KAA0B,QAA1B,GAAqCmL,IAAI,CAACC,KAAL,CAAWrL,SAAS,CAACC,IAArB,CAArC,GAAkED,SAAS,CAACC,IAZpE;gBAaf6N,GAbe,GAaT5N,8CAAa,CAAC;kBAAE6C,UAAU,EAAE8K,aAAd;kBAA6B5N,IAAI,EAAJA,IAA7B;kBAAmCE,OAAO,EAAEgJ,oDAAuBsC;gBAAnE,CAAD,CAbJ;gBAAA,kCAcdqC,GAdc;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAxEhB;IAwFLhQ,0BAA0B;MAAA,sGAAE,mBAAOU,OAAP,EAAwBsF,CAAxB;QAAA;UAAA;YAAA;cAAA;gBAC1BQ,6BAAA,CAAS,4BAAT,EAAuC9F,OAAvC;gBAD0B,mCAEnBiO,uDAAsB,CAACG,OAAD,CAFH;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA,GAxFrB;IA4FL/O,qBAAqB,EAAE,+BAACmC,SAAD,EAAmC8D,CAAnC,EAAuE;MAC5FQ,6BAAA,CAAS,uBAAT,EAAkCtE,SAAlC;MACA,IAAMkO,QAAQ,GAAG/G,2DAAc,CAACnH,SAAS,CAACC,IAAX,CAA/B;MACA,IAAMkO,IAAI,GAAGb,MAAM,CAAC1N,IAAP,CAAYsO,QAAZ,EAAsB,KAAtB,CAAb;MACA,IAAME,SAAS,GAAG5B,wCAAO,CAAC;QAAE6B,aAAa,EAAEjD,IAAI,CAACC,KAAL,CAAW8C,IAAI,CAAC7H,QAAL,CAAc,MAAd,CAAX,CAAjB;QAAwEvD,UAAU,EAAE6J;MAApF,CAAD,CAAzB;MACA,OAAOwB,SAAP;IACD;EAlGI,CAAP;AAoGD;;AC7ID,MAAM,sBAA4B;;;ACAlC;AACA;AAEO,SAASI,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EAC/B,IAAID,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKrM,SAApB,IAAiCsM,CAAC,KAAK,IAAvC,IAA+CA,CAAC,KAAKtM,SAAzD,EAAoE;IAClE,OAAO,IAAP;EACD;;EACD,OAAO,IAAI8E,+CAAJ,CAAcuH,CAAd,EAAiB,EAAjB,EAAqBE,EAArB,CAAwBD,CAAxB,EAA2B,EAA3B,CAAP;AACD;AAEM,SAASE,OAAT,CAAiBC,OAAjB,EAA8B;EACnC,OAAOP,yDAAY,CAACO,OAAO,CAACvI,QAAR,CAAiB,EAAjB,CAAD,CAAnB;AACD;AAEM,SAASwI,OAAT,CAAiBC,QAAjB,EAAuC;EAC5C,IAAIR,gDAAA,CAAQQ,QAAR,CAAJ,EAAuB,OAAOA,QAAP;EACvB,OAAO,IAAIR,2CAAJ,CAAOpH,2DAAc,CAAC4H,QAAD,CAArB,EAAiC,EAAjC,CAAP;AACD;AAEM,SAASE,oBAAT,CAA8BC,QAA9B,EAA4CC,SAA5C,EAAwEC,WAAxE,EAA0G;EAC/G,IAAMC,QAAQ,GAAG,IAAId,2CAAJ,CAAOY,SAAP,CAAjB;EACA,IAAMG,OAAO,GAAG,IAAIf,2CAAJ,CAAOa,WAAP,CAAhB;EACA,OAAOF,QAAQ,CAACK,GAAT,CAAaF,QAAb,EAAuBvH,GAAvB,CAA2BwH,OAA3B,CAAP;AACD;;ACvBM,IAAME,oBAAoB,GAAG,uEAA7B;AACA,IAAMC,kBAAkB,GAAG,8EAA3B;AACA,IAAMC,0BAA0B,GAAG;EACxCC,MAAM,EAAE,KADgC;EAExCC,WAAW,EAAE,KAF2B;EAGxCC,UAAU,EAAE;AAH4B,CAAnC;AAMA,IAAMC,iBAAiB,GAAG;EAC/BC,UAAU,EAAE,WADmB;EAE/BC,oBAAoB,EAAE,qBAFS;EAG/BC,eAAe,EAAE,oBAHc;EAI/BC,oBAAoB,EAAE;AAJS,CAA1B;AAOA,IAAMC,kBAAkB,GAAG;EAChCN,UAAU,EAAE,YADoB;EAEhCF,MAAM,EAAE,QAFwB;EAGhCS,YAAY,EAAE,cAHkB;EAIhCC,IAAI,EAAE;AAJ0B,CAA3B;;;;;;;;;;;;ACfP;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEO,IAAMG,oBAAb;EAOE,oCAAoG;IAAA,IAAtFhD,sBAAsF,QAAtFA,sBAAsF;;IAAA;;IAAA,8CANpD,IAMoD;;IAAA;;IAAA,sDAFtE,KAEsE;;IAClG,KAAKA,sBAAL,GAA8BA,sBAA9B;EACD;;EATH;IAAA;IAAA,KAWE,eAAoB;MAClB,OAAO,KAAKA,sBAAL,EAAP;IACD;EAbH;IAAA;IAAA;MAAA,gFAeE;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC4B,KAAKiD,aAAL,CAAmBnL,OAAnB,CAA8C;kBAAEjC,MAAM,EAAE,qBAAV;kBAAiC1D,MAAM,EAAE;gBAAzC,CAA9C,CAD5B;;cAAA;gBACE,KAAKkF,WADP;gBAAA;gBAAA,OAEmC,KAAK6L,uBAAL,EAFnC;;cAAA;gBAEE,KAAKC,mBAFP;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAfF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,kGAoBE;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAK9L,WADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAC+B,IAAIvG,KAAJ,CAAU,8BAAV,CAD/B;;cAAA;gBAAA,oBAEyC,KAAKuG,WAF9C,EAEuB+L,IAFvB,qBAEUhL,WAFV,EAE6BvD,OAF7B,qBAE6BA,OAF7B;gBAGQwO,QAHR,GAGmB,KAAKF,mBAAL,GAA2BJ,sCAA3B,GAA6CA,sCAHhE;gBAIQS,iBAJR,GAI4B;kBACxBJ,IAAI,EAAJA,IADwB;kBAExBvO,OAAO,EAAEA,OAAO,KAAK,SAAZ,GAAwB,CAAxB,GAA4B6J,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyB,EAAzB,CAFb;kBAGxB4O,SAAS,EAAE5O,OAAO,KAAK,SAAZ,GAAwB,CAAxB,GAA4B6J,MAAM,CAACE,QAAP,CAAgB/J,OAAhB,EAAyB,EAAzB,CAHf;kBAIxB6O,eAAe,EAAEL;gBAJO,CAJ5B;gBAAA,kCAUSP,uBAAA,CAAcU,iBAAd,CAVT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CApBF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,6FAiCE,kBAAwBtR,QAAxB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKmF,WADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAC+B,IAAIvG,KAAJ,CAAU,8BAAV,CAD/B;;cAAA;gBAGQ6S,cAHR,yCAIOzR,QAJP;;gBAAA,MAOMyR,cAAc,CAACC,KAAf,KAAyBhP,SAP/B;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAQkC,KAAKqO,aAAL,CAAmBnL,OAAnB,CAAmC;kBAC/DjC,MAAM,EAAE,yBADuD;kBAE/D1D,MAAM,EAAE,CAACD,QAAQ,CAACE,IAAV,EAAgB,QAAhB;gBAFuD,CAAnC,CARlC;;cAAA;gBAQIuR,cAAc,CAACC,KARnB;;cAAA;gBAAA,MAaM,CAAC,KAAKT,mBAAN,IAA6BQ,cAAc,CAACE,QAblD;kBAAA;kBAAA;gBAAA;;gBAcI,IAAIF,cAAc,CAACG,YAAnB,EAAiC,OAAOH,cAAc,CAACG,YAAtB;gBACjC,IAAIH,cAAc,CAACI,oBAAnB,EAAyC,OAAOJ,cAAc,CAACI,oBAAtB,CAf7C,CAgBI;;gBAhBJ,IAiBSJ,cAAc,CAACK,GAjBxB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAkBoC,KAAKC,kBAAL,CAAwBN,cAAxB,CAlBpC;;cAAA;gBAkBYO,eAlBZ;;gBAmBM,IAAIA,eAAJ,EAAqB;kBACnBP,cAAc,CAACQ,QAAf,GAA0BD,eAA1B;gBACD;;gBArBP;gBAAA;;cAAA;gBAuBMP,cAAc,CAACQ,QAAf,GAA0BR,cAAc,CAACK,GAAzC;;cAvBN;gBAAA,kCAyBWL,cAzBX;;cAAA;gBAAA,IA4BOA,cAAc,CAACK,GA5BtB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OA6BkC,KAAKC,kBAAL,CAAwBN,cAAxB,CA7BlC;;cAAA;gBA6BUO,gBA7BV;;gBA8BI,IAAIA,gBAAJ,EAAqB;kBACnBP,cAAc,CAACQ,QAAf,GAA0BD,gBAA1B;gBACD;;gBAhCL;gBAAA;;cAAA;gBAkCIP,cAAc,CAACQ,QAAf,GAA0BR,cAAc,CAACK,GAAzC;;cAlCJ;gBAAA;gBAAA,OAyCY,KAAKI,iBAAL,CAAuBT,cAAvB,CAzCZ;;cAAA;gBAAA;gBAsCcU,eAtCd,yBAsCIR,QAtCJ;gBAuCkBS,mBAvClB,yBAuCIR,YAvCJ;gBAwC0BS,2BAxC1B,yBAwCIR,oBAxCJ;;gBA2CE,IAAI,KAAKZ,mBAAT,EAA8B;kBAC5B;kBACA;kBACA,IAAIQ,cAAc,CAACE,QAAf,IAA2B,CAACF,cAAc,CAACG,YAA3C,IAA2D,CAACH,cAAc,CAACI,oBAA/E,EAAqG;oBACnGJ,cAAc,CAACG,YAAf,GAA8BH,cAAc,CAACE,QAA7C;oBAEAF,cAAc,CAACI,oBAAf,GAAsC/C,UAAU,CAC9C,OAAOuD,2BAAP,KAAuC,QAAvC,GAAkD5K,2DAAc,CAAC4K,2BAAD,CAAhE,GAAgGA,2BADlD,EAE9C,OAAOZ,cAAc,CAACE,QAAtB,KAAmC,QAAnC,GAA8ClK,2DAAc,CAACgK,cAAc,CAACE,QAAhB,CAA5D,GAAwFF,cAAc,CAACE,QAFzD,CAAV,GAIlCU,2BAJkC,GAKlCZ,cAAc,CAACE,QALnB;kBAMD,CATD,MASO;oBACL,IAAIS,mBAAmB,IAAI,CAACX,cAAc,CAACG,YAA3C,EAAyD;sBACvD;sBACA;sBACAH,cAAc,CAACG,YAAf,GAA8BQ,mBAA9B;oBACD;;oBAED,IAAIC,2BAA2B,IAAI,CAACZ,cAAc,CAACI,oBAAnD,EAAyE;sBACvE;sBACA;sBACAJ,cAAc,CAACI,oBAAf,GAAsCQ,2BAAtC;oBACD;;oBAED,IAAIF,eAAe,IAAI,CAACV,cAAc,CAACG,YAAvC,EAAqD;sBACnD;sBACA;sBACA;sBACAH,cAAc,CAACG,YAAf,GAA8BO,eAA9B;oBACD;;oBAED,IAAIV,cAAc,CAACG,YAAf,IAA+B,CAACH,cAAc,CAACI,oBAAnD,EAAyE;sBACvE;sBACA;sBACA;sBACA;sBACAJ,cAAc,CAACI,oBAAf,GAAsCJ,cAAc,CAACG,YAArD;oBACD;kBACF,CAvC2B,CAyC5B;;;kBAEA,OAAOH,cAAc,CAACE,QAAtB;gBACD,CA5CD,MA4CO;kBACL;kBACA;kBAEA,OAAOF,cAAc,CAACI,oBAAtB;kBACA,OAAOJ,cAAc,CAACG,YAAtB;gBACD,CA7FH,CA+FE;gBACA;gBACA;gBACA;;;gBACA,IAAIO,eAAe,IAAI,CAACV,cAAc,CAACE,QAAnC,IAA+C,CAACF,cAAc,CAACI,oBAA/D,IAAuF,CAACJ,cAAc,CAACG,YAA3G,EAAyH;kBACvHH,cAAc,CAACE,QAAf,GAA0BQ,eAA1B;gBACD;;gBAEDV,cAAc,CAACa,IAAf,GAAsB,KAAKrB,mBAAL,GAA2BjB,qCAA3B,GAAmEA,iCAAzF;gBACAyB,cAAc,CAAC9O,OAAf,GAAyB,KAAKwC,WAAL,CAAiBxC,OAA1C;gBAxGF,kCAyGS8O,cAzGT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAjCF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oGA6IE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC0B,KAAKV,aAAL,CAAmBnL,OAAnB,CAAmC;kBAAEjC,MAAM,EAAE,cAAV;kBAA0B1D,MAAM,EAAE;gBAAlC,CAAnC,CAD1B;;cAAA;gBACQ0R,QADR;gBAAA,kCAES;kBACLA,QAAQ,EAAEnI,eAAe,CAACmI,QAAD,CAAf,CAA0B/K,QAA1B;gBADL,CAFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CA7IF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mGAoJE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC4B,KAAKmK,aAAL,CAAmBnL,OAAnB,CAAkC;kBAAEjC,MAAM,EAAE,sBAAV;kBAAkC1D,MAAM,EAAE,CAAC,QAAD,EAAW,KAAX;gBAA1C,CAAlC,CAD5B;;cAAA;gBACQsS,WADR;gBAEQC,eAFR,GAE0BD,WAAW,IAAIA,WAAW,CAACE,aAAZ,KAA8B/P,SAFvE;gBAAA,kCAIS,CAAC,CAAC8P,eAJX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CApJF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mGA2JE;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKrN,WADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAC+B,IAAIvG,KAAJ,CAAU,8BAAV,CAD/B;;cAAA;gBAEQ8T,wBAFR,GAEmC,KAAKvN,WAAL,CAAiBxC,OAAjB,KAA6B,KAFhE;gBAIQA,OAJR,GAIkB6J,MAAM,CAACE,QAAP,CAAgB,KAAKvH,WAAL,CAAiBxC,OAAjC,EAA0C,EAA1C,CAJlB;gBAAA;;gBAAA,KASQ,KAAKsO,mBATb;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAW8B9G,wBAAwB,CAAC4F,0BAAA,CAA2B,YAA3B,YAA4CpN,OAA5C,EAAD,CAXtD;;cAAA;gBAWY0H,SAXZ;gBAYMuI,OAAO,GAAG;kBACRC,eAAe,EAAExI,SADT;kBAERyI,eAAe,EAAErC,6BAA6BN;gBAFtC,CAAV;gBAZN;gBAAA;;cAAA;gBAAA,KAgBeuC,wBAhBf;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAiB8B7H,4BAA4B,CAACiF,4BAAA,CAA6B,YAA7B,YAA8CnN,OAA9C,EAAD,CAjB1D;;cAAA;gBAiBY0H,UAjBZ;gBAkBMuI,OAAO,GAAG;kBACRC,eAAe,EAAExI,UADT;kBAERyI,eAAe,EAAErC,yBAAyBR;gBAFlC,CAAV;gBAlBN;gBAAA;;cAAA;gBAAA,MAuBY,IAAIrR,KAAJ,CAAU,oDAAV,CAvBZ;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAAA;gBAAA;gBAAA,OA2B8B,KAAKmU,wBAAL,EA3B9B;;cAAA;gBA2BY1I,WA3BZ;gBA4BMuI,OAAO,GAAG;kBACRC,eAAe,EAAExI,WADT;kBAERyI,eAAe,EAAErC,+BAA+BC;gBAFxC,CAAV;gBA5BN;gBAAA;;cAAA;gBAAA;gBAAA;gBAAA,MAiCY,IAAI9R,KAAJ,qDAAuD,aAAiBa,OAAxE,EAjCZ;;cAAA;gBAAA,kCAoCSmT,OApCT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CA3JF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,6FAkME,kBACE5S,QADF;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,MAGO,CAAC,KAAKiR,mBAAN,IAA6BjR,QAAQ,CAAC2R,QAAvC,IAAqD,KAAKV,mBAAL,IAA4BjR,QAAQ,CAAC4R,YAArC,IAAqD5R,QAAQ,CAAC6R,oBAHzH;kBAAA;kBAAA;gBAAA;;gBAAA,kCAIW,EAJX;;cAAA;gBAAA;gBAAA;gBAAA,OAQuD,KAAKmB,uBAAL,EARvD;;cAAA;gBAAA;gBAQYH,eARZ,yBAQYA,eARZ;gBAQ6BC,eAR7B,yBAQ6BA,eAR7B;;gBAAA,MASQ,KAAK7B,mBAAL,IAA4B6B,eAAe,KAAKrC,6BATxD;kBAAA;kBAAA;gBAAA;;gBAAA,QAUwFoC,eAVxF,uBAUclI,MAVd;gBAUM,yCAA2E,EAA3E;gBAAkBF,6BAVxB,gBAUwBA,6BAVxB,EAUuDC,qBAVvD,gBAUuDA,qBAVvD;;gBAAA,MAYUD,6BAA6B,IAAIC,qBAZ3C;kBAAA;kBAAA;gBAAA;;gBAAA,kCAae;kBACLkH,YAAY,EAAEhD,yDAAY,CAACtF,eAAe,CAACoB,qBAAD,CAAhB,CADrB;kBAELmH,oBAAoB,EAAEjD,yDAAY,CAACtF,eAAe,CAACmB,6BAAD,CAAhB;gBAF7B,CAbf;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA,MAkBeqI,eAAe,KAAKrC,yBAlBnC;kBAAA;kBAAA;gBAAA;;gBAAA,kCAqBa;kBACLkB,QAAQ,EAAE/C,yDAAY,CAACtF,eAAe,CAAEuJ,eAAD,CAAmClI,MAApC,CAAhB;gBADjB,CArBb;;cAAA;gBAAA,MAwBemI,eAAe,KAAKrC,+BAxBnC;kBAAA;kBAAA;gBAAA;;gBAAA,kCA2Ba;kBACLkB,QAAQ,EAAE/C,yDAAY,CAACtF,eAAe,CAAEuJ,eAAD,CAAqClB,QAAtC,CAAhB;gBADjB,CA3Bb;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAgCI/M,8BAAA;;cAhCJ;gBAAA;gBAAA,OAmC6B,KAAKmO,wBAAL,EAnC7B;;cAAA;gBAAA;gBAmCUpB,QAnCV,yBAmCUA,QAnCV;gBAAA,kCAqCS;kBAAEA,QAAQ,EAAE/C,yDAAY,CAACtF,eAAe,CAACqI,QAAD,CAAhB;gBAAxB,CArCT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAlMF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFA0OE,kBAA4BsB,MAA5B;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQjT,QADR,yCACwBiT,MADxB,GAGE;gBACA;gBACA;gBACA;gBACA;;gBACA,OAAOjT,QAAQ,CAAC2R,QAAhB;gBACA,OAAO3R,QAAQ,CAAC4R,YAAhB;gBACA,OAAO5R,QAAQ,CAAC6R,oBAAhB;gBAVF;gBAAA,OAWqB,KAAKd,aAAL,CAAmBnL,OAAnB,CAAmC;kBAAEjC,MAAM,EAAE,iBAAV;kBAA6B1D,MAAM,EAAE,CAACD,QAAD;gBAArC,CAAnC,CAXrB;;cAAA;gBAWQ8R,GAXR;gBAAA,kCAYSA,GAZT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CA1OF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,2FAyPE,kBAA8BmB,MAA9B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAIuB,KAAKlC,aAAL,CAAmBnL,OAAnB,CAAkC;kBAAEjC,MAAM,EAAE,sBAAV;kBAAkC1D,MAAM,EAAE,CAAC,QAAD,EAAW,KAAX;gBAA1C,CAAlC,CAJvB;;cAAA;gBAIQiT,KAJR;gBAKE;gBACMC,eANR,GAM0B/D,OAAO,CAAC8D,KAAK,CAACjB,QAAP,CANjC;gBAOQmB,eAPR,GAO0B7D,oBAAoB,CAAC4D,eAAD,EAAkB,EAAlB,EAAsB,EAAtB,CAP9C;gBAQME,eARN,GAQwBnE,OAAO,CAACkE,eAAD,CAR/B;gBAAA;gBAAA;gBAAA,OAW4B,KAAKE,aAAL,CAAmBL,MAAnB,CAX5B;;cAAA;gBAWII,eAXJ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAaIzO,6BAAA;;cAbJ;gBAAA,kCAeS;kBAAE4O,aAAa,EAAEN,KAAK,CAACjB,QAAvB;kBAA2CoB,eAAe,EAAfA;gBAA3C,CAfT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAzPF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,OA2QE,sBAAqBI,kBAArB,EAAiDC,gBAAjD,EAAqG;MAAA,IAA1BC,UAA0B,uEAAb,GAAa;MACnG,IAAMC,iBAAiB,GAAGxE,OAAO,CAACqE,kBAAD,CAAjC;MACA,IAAMI,eAAe,GAAGzE,OAAO,CAACsE,gBAAD,CAA/B;MACA,IAAMI,eAAe,GAAGD,eAAe,CAACE,IAAhB,CAAqB,GAArB,CAAxB;MACA,IAAMC,kBAAkB,GAAGJ,iBAAiB,CAACG,IAAlB,CAAuBJ,UAAvB,CAA3B,CAJmG,CAMnG;;MACA,IAAIC,iBAAiB,CAACK,EAAlB,CAAqBH,eAArB,CAAJ,EAA2C,OAAO5E,OAAO,CAAC0E,iBAAD,CAAd,CAPwD,CAQnG;;MACA,IAAII,kBAAkB,CAAC/E,EAAnB,CAAsB6E,eAAtB,CAAJ,EAA4C,OAAO5E,OAAO,CAAC8E,kBAAD,CAAd,CATuD,CAUnG;;MACA,OAAO9E,OAAO,CAAC4E,eAAD,CAAd;IACD;EAvRH;IAAA;IAAA;MAAA,wGAyRE,mBAA2CI,YAA3C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAIU3T,IAJV,GAIuB2T,YAJvB,CAIU3T,IAJV,EAIgB4T,EAJhB,GAIuBD,YAJvB,CAIgBC,EAJhB;gBAKM1O,IALN,GAKa,EALb;;gBAAA,MASMlF,IAAI,IAAI,CAAC4T,EATf;kBAAA;kBAAA;gBAAA;;gBAUIC,UAAU,GAAGhE,iCAAb;gBAVJ;gBAAA;;cAAA;gBAAA;gBAAA;gBAAA,OAaoB,KAAKW,aAAL,CAAmBnL,OAAnB,CAAmC;kBAAEjC,MAAM,EAAE,aAAV;kBAAyB1D,MAAM,EAAE,CAACkU,EAAD,EAAK,QAAL;gBAAjC,CAAnC,CAbpB;;cAAA;gBAaM1O,IAbN;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAeMb,6BAAA;;cAfN;gBAiBUyP,WAjBV,GAiBwB,CAAC5O,IAAD,IAASA,IAAI,KAAK,IAAlB,IAA0BA,IAAI,KAAK,KAjB3D;gBAmBI2O,UAAU,GAAGC,WAAW,GAAGjE,4BAAH,GAAkCA,sCAA1D;;cAnBJ;gBAAA,mCAsBS;kBAAEkE,mBAAmB,EAAEF,UAAvB;kBAAmC3O,IAAI,EAAJA;gBAAnC,CAtBT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAzRF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,8FAkTE,mBAAiCzF,QAAjC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACwC,KAAKuU,4BAAL,uCAAuCvU,QAAvC,EADxC;;cAAA;gBAAA;gBACUsU,mBADV,yBACUA,mBADV;;gBAAA,KAGMtU,QAAQ,CAAC8R,GAHf;kBAAA;kBAAA;gBAAA;;gBAAA,mCAIW9R,QAAQ,CAAC8R,GAJpB;;cAAA;gBAAA,MAOM9R,QAAQ,CAACmU,EAAT,IAAeG,mBAAmB,KAAKlE,4BAP7C;kBAAA;kBAAA;gBAAA;;gBAAA,KASQpQ,QAAQ,CAACO,IATjB;kBAAA;kBAAA;gBAAA;;gBAAA,MAUY3B,KAAK,CAAC,iEAAD,CAVjB;;cAAA;gBAaU4V,mBAbV,GAagC,KAbhC,EAeI;;gBAfJ,mCAgBW5F,yDAAY,CAAC4F,mBAAmB,CAAC5N,QAApB,CAA6B,EAA7B,CAAD,CAhBvB;;cAAA;gBAAA;gBAAA,OAmBmD,KAAK6N,eAAL,CAAqBzU,QAArB,CAnBnD;;cAAA;gBAAA;gBAmBUwT,aAnBV,yBAmBUA,aAnBV;gBAmByBH,eAnBzB,yBAmByBA,eAnBzB;gBAqBE;gBACMpB,QAtBR,GAsBmB,KAAKyC,YAAL,CAAkB9F,yDAAY,CAACyE,eAAD,CAA9B,EAAiDG,aAAjD,CAtBnB;gBAAA,mCAuBSvB,QAvBT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAlTF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASO,IAAM0C,0BAAb;EAAA;;EAAA;;EACE,0CAAgH;IAAA,IAAlG1P,MAAkG,QAAlGA,MAAkG;IAAA,IAA1FC,KAA0F,QAA1FA,KAA0F;;IAAA;;IAAA,yBACxG;MAAED,MAAM,EAAE;QAAEE,WAAW,EAAE,oFAAKF,MAAM,CAACE,WAAd;UAA2BC,cAAc,EAAEX,4CAAuBY;QAAlE;MAAb,CAAV;MAA+FH,KAAK,EAALA;IAA/F,CADwG;EAE/G;;EAHH;IAAA;IAAA;MAAA,kFAcE;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKA,KAAL,CAAW7B,UADlB;kBAAA;kBAAA;gBAAA;;gBAAA,MAEUzF,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,2EAAX;kBAAwFgG,IAAI,EAAE;gBAA9F,CAA1B,CAFV;;cAAA;gBAAA;gBAAA,OAGQ,KAAKC,aAAL,CAAmB,KAAKR,KAAL,CAAW7B,UAA9B,CAHR;;cAAA;gBAAA,iCAIS,KAAKsC,oBAAL,CAA0BC,OAA1B,CAAkC;kBAAEjC,MAAM,EAAE;gBAAV,CAAlC,CAJT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAdF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAqBE,kBAA2BuJ,OAA3B;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACQC,WADR,GACsB,IAAI2D,oBAAJ,CAAyB;kBAC3ChD,sBAAsB,EAAE,KAAKA,sBAAL,CAA4B8G,IAA5B,CAAiC,IAAjC;gBADmB,CAAzB,CADtB;gBAIQ1S,gBAJR,GAI2BgC,sCAAmB,CAAC;kBAC3CiJ,WAAW,EAAXA,WAD2C;kBAE3CD,OAAO,EAAPA,OAF2C;kBAG3CY,sBAAsB,EAAE,KAAKA,sBAAL,CAA4B8G,IAA5B,CAAiC,IAAjC;gBAHmB,CAAD,CAJ9C;gBASQzS,aATR,GASwBF,mBAAmB,CAACC,gBAAD,CAT3C;gBAUQ2S,qBAVR,GAUgC,KAAKC,wBAAL,EAVhC;gBAWQ/N,MAXR,GAWiB,IAAIvC,yCAAJ,EAXjB,EAYE;;gBAZF,uBAagCV,mBAAmB,CAAC,KAAKmB,MAAL,CAAYE,WAAb,CAbnD,EAaUlB,iBAbV,wBAaUA,iBAbV;gBAcE8C,MAAM,CAACC,IAAP,CAAY7E,aAAZ;gBACA4E,MAAM,CAACC,IAAP,CAAY6N,qBAAZ;gBACA9N,MAAM,CAACC,IAAP,CAAY,KAAK+N,oBAAL,EAAZ;gBACAhO,MAAM,CAACC,IAAP,CAAY/C,iBAAZ;gBACMsB,QAlBR,GAkBmBhB,uDAAkB,CAACwC,MAAD,CAlBrC;gBAmBE,KAAKE,yBAAL,CAA+B1B,QAA/B;gBAnBF;gBAAA,OAoBQ4H,WAAW,CAAC6H,IAAZ,EApBR;;cAAA;gBAAA;gBAAA,OAqBQ,KAAKzO,aAAL,EArBR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CArBF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFA6CE,kBAA2BtG,MAA3B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAK0F,oBADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACwC/H,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,6BAAX;kBAA0CgG,IAAI,EAAE;gBAAhD,CAA1B,CADxC;;cAAA;gBAAA;gBAAA,OAE4B,KAAKE,oBAAL,CAA0BC,OAA1B,CAAmD;kBAAEjC,MAAM,EAAE;gBAAV,CAAnD,CAF5B;;cAAA;gBAEQsR,WAFR;;gBAAA,MAGMA,WAAW,KAAKhV,MAAM,CAACoD,UAH7B;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAIU,KAAKqC,aAAL,CAAmBzF,MAAM,CAACoD,UAA1B,CAJV;;cAAA;gBAAA,eAKI,KAAKsC,oBALT;gBAAA;gBAAA,OAMsB,KAAKA,oBAAL,CAA0BC,OAA1B,CAAqD;kBAAEjC,MAAM,EAAE;gBAAV,CAArD,CANtB;;cAAA;gBAAA;gBAAA;kBAMM3E,QANN;gBAAA;;gBAAA,aAK8B8H,IAL9B,oBAKmC,iBALnC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CA7CF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAwDE,kBAAyB7G,MAAzB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAK0F,oBADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACwC/H,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,6BAAX;kBAA0CgG,IAAI,EAAE;gBAAhD,CAA1B,CADxC;;cAAA;gBAEQN,WAFR,GAEsB,KAAKT,cAAL,CAAoBzE,MAAM,CAAC0C,OAA3B,CAFtB;gBAGE,KAAKsD,MAAL,CAAY;kBACVtD,OAAO,EAAE;gBADC,CAAZ;gBAGA,KAAK2D,SAAL,CAAe;kBAAEnB,WAAW,EAAXA;gBAAF,CAAf;gBANF;gBAAA,OAOwB,KAAKQ,oBAAL,CAA0BC,OAA1B,CAAmD;kBAAEjC,MAAM,EAAE;gBAAV,CAAnD,CAPxB;;cAAA;gBAOQuJ,OAPR;gBAAA;gBAAA,OAQQ,KAAKxH,aAAL,CAAmBwH,OAAnB,CARR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAxDF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAmEE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKvH,oBADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACwC/H,iEAAA,CAA0B;kBAAE6B,OAAO,EAAE,6BAAX;kBAA0CgG,IAAI,EAAE;gBAAhD,CAA1B,CADxC;;cAAA;gBAEU9C,OAFV,GAEsB,KAAKsC,MAAL,CAAYE,WAFlC,CAEUxC,OAFV;;gBAAA,IAGOA,OAHP;kBAAA;kBAAA;gBAAA;;gBAAA,MAGsB/E,mEAAA,CAA4B,yCAA5B,CAHtB;;cAAA;gBAAA;gBAAA,OAIwB,KAAK+H,oBAAL,CAA0BC,OAA1B,CAAoD;kBACxEjC,MAAM,EAAE,aADgE;kBAExE1D,MAAM,EAAE;gBAFgE,CAApD,CAJxB;;cAAA;gBAIQiV,OAJR;;gBAAA,MASMxI,QAAQ,CAAC/J,OAAD,EAAU,EAAV,CAAR,KAA0B+J,QAAQ,CAACwI,OAAD,EAAU,EAAV,CATxC;kBAAA;kBAAA;gBAAA;;gBAAA,MAS6DtX,4EAAA,4CAAyEsX,OAAzE,EAT7D;;cAAA;gBAUE,IAAI,KAAKhQ,KAAL,CAAWvC,OAAX,KAAuBA,OAA3B,EAAoC;kBAClC,KAAKgD,oBAAL,CAA0BmB,IAA1B,CAA+B,cAA/B,EAA+CnE,OAA/C;;kBACA,KAAKgD,oBAAL,CAA0BmB,IAA1B,CAA+B,SAA/B,EAA0C;oBAAEnE,OAAO,EAAPA;kBAAF,CAA1C;gBACD;;gBACD,KAAKsD,MAAL,CAAY;kBAAEtD,OAAO,EAAPA;gBAAF,CAAZ;gBAdF,kCAeSuS,OAfT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAnEF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,OAqFE,oCAAqE;MAAA;;MACnE,IAAME,mBAAyC,GAAG;QAChD9S,QAAQ;UAAA,oFAAE,kBAAOrC,MAAP;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBACA0C,OADA,GACmE1C,MADnE,CACA0C,OADA,EACSyD,SADT,GACmEnG,MADnE,CACSmG,SADT,EACoBxD,OADpB,GACmE3C,MADnE,CACoB2C,OADpB,EAC6ByS,iBAD7B,GACmEpV,MADnE,CAC6BoV,iBAD7B,EACgDxS,cADhD,GACmE5C,MADnE,CACgD4C,cADhD;;oBAER,KAAI,CAACP,QAAL,CAAc;sBACZ8C,cAAc,EAAE,QADJ;sBAEZzC,OAAO,EAAPA,OAFY;sBAGZ2S,MAAM,EAAE,CAAAzS,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE0S,MAAhB,KAA0B,KAHtB;sBAIZC,UAAU,EAAE,CAAA3S,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEqO,IAAhB,KAAwB,OAJxB;sBAKZhL,WAAW,EAAEE,SALD;sBAMZrC,SAAS,EAAEnB,OAAO,CAAC,CAAD,CANN;sBAOZ6S,aAAa,EAAE,CAAAJ,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,YAAAA,iBAAiB,CAAG,CAAH,CAAjB,KAA0B;oBAP7B,CAAd;;kBAFQ;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAF;;UAAA;YAAA;UAAA;;UAAA;QAAA,GADwC;QAahD9S,WAAW;UAAA,wFAAE,kBAAOtC,MAAP;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBACH0C,OADG,GACS1C,MADT,CACH0C,OADG;oBAAA;oBAAA,OAEL,KAAI,CAACJ,WAAL,CAAiB;sBAAEI,OAAO,EAAPA;oBAAF,CAAjB,CAFK;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAF;;UAAA;YAAA;UAAA;;UAAA;QAAA;MAbqC,CAAlD;MAkBA,IAAMkS,qBAAqB,GAAGxS,2BAA2B,CAAC+S,mBAAD,CAAzD;MACA,OAAOP,qBAAP;IACD;EA1GH;IAAA;IAAA,OA4GE,gCAAiE;MAAA;;MAC/D,IAAMa,eAAiC,GAAG;QACxCxS,gBAAgB;UAAA,4FAAE,kBAAOjD,MAAP;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBACRoD,UADQ,GACOpD,MADP,CACRoD,UADQ;oBAAA;oBAAA,OAEV,MAAI,CAACF,aAAL,CAAmB;sBAAEE,UAAU,EAAVA;oBAAF,CAAnB,CAFU;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAF;;UAAA;YAAA;UAAA;;UAAA;QAAA;MADwB,CAA1C;MAMA,OAAOJ,uBAAuB,CAACyS,eAAD,CAA9B;IACD;EApHH;;EAAA;AAAA,EAAgD3Q,0CAAhD;;yBAAa4P;kFAKyB,kBAAO1U,MAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YAI5BsH,eAJ4B,GAIV,IAAIoN,0BAAJ,CAA+B;cAAE1P,MAAM,EAAE;gBAAEE,WAAW,EAAElF,MAAM,CAACkF;cAAtB;YAAV,CAA/B,CAJU;YAAA;YAAA,OAK5BoC,eAAe,CAAC7B,aAAhB,CAA8BzF,MAAM,CAACiN,OAArC,CAL4B;;UAAA;YAAA,kCAM3B3F,eAN2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;;;;;;ACxBtC;AACA;;;ACDA","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/get\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"ethereumjs-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/get\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{ chainId: chainConfig.chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ethereumjs-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import BigNumber from \"bignumber.js\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { isValidAddress } from \"ethereumjs-util\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { privateToAddress, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, BN, stripHexPrefix } from \"ethereumjs-util\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import Common, { Hardfork } from \"@ethereumjs/common\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["createAsyncMiddleware","createScaffoldMiddleware","ethErrors","resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","getChainConfig","isHexStrict","log","WalletInitializationError","WalletLoginError","BaseProvider","WalletConnectProvider","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","update","displayName","sendCustomRequest","chainName","error","configure","lookupNetwork","notReady","connected","notConnectedError","connectedHexChainId","toString","rpcConnectionError","emit","engine","push","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","BigNumber","stripHexPrefix","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","get","assert","isValidAddress","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","primaryType","types","validation","validate","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","TransactionFactory","decrypt","getEncryptionPublicKey","privateToAddress","signTx","privKey","txFormatter","formatTransaction","finalTxParams","getCommonConfiguration","common","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","concat","txHash","rawMessageSig","privKeyBuffer","sig","debug","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","getEIP1559Compatibility","isEIP1559Compatible","name","hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","getDefaultGasLimit","defaultGasLimit","gasLimit","getDefaultGasFees","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","type","latestBlock","supportsEIP1559","baseFeePerGas","isLegacyGasAPICompatible","replace","gasData","gasFeeEstimates","gasEstimateType","fetchEthGasPriceEstimate","fetchGasFeeEstimateData","txMeta","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","estimateTxGas","warn","blockGasLimit","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","txParameters","to","txCategory","codeIsEmpty","transactionCategory","determineTransactionCategory","TWENTY_ONE_THOUSAND","analyzeGasUsage","addGasBuffer","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","init","existingKey","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","ticker","symbol","tickerName","blockExplorer","accountHandlers"],"sourceRoot":""}