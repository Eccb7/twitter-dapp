{"version":3,"file":"metamaskAdapter.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA,MAAM,gCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,mBAA4B;;;ACAlC,MAAM,wBAA4B;;;ACAlC,MAAM,yCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,+BAA4B;;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,gCAA4B;;;;;;;;;;;;;;;;;ACAlC;AACA;AAqBA;;IAaMY;;;;;EAeJ,yBAAYC,cAAZ,EAAoD;IAAA;;IAAA;;IAClD,0BAAMA,cAAN;;IADkD,qFAdFV,8CAcE;;IAAA,0FAZCE,4CAYD;;IAAA,yEAVbJ,8CAUa;;IAAA,yEAR5BO,6CAQ4B;;IAAA,2EANfJ,6CAMe;;IAAA,+EAJ/B,KAI+B;;IAAA,qFAFA,IAEA;;IAElD,MAAKc,WAAL,GAAmB,CAAAL,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEK,WAAhB,KAA+B,IAAlD;IACA,MAAKC,WAAL,GAAmB,CAAAN,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEM,WAAhB,KAA+B,KAAlD;IAHkD;EAInD;;;;SAED,eAAgD;MAC9C,IAAI,KAAKC,MAAL,KAAgBhB,6CAAhB,IAA4C,KAAKkB,gBAArD,EAAuE;QACrE,OAAO,KAAKA,gBAAZ;MACD;;MACD,OAAO,IAAP;IACD;SAED,aAAaC,CAAb,EAAiD;MAC/C,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;IACD;;;;sFAED,iBAAWC,OAAX;QAAA;UAAA;YAAA;cAAA;gBACE;;gBADF;gBAAA,OAEiCzB,yBAAsB,CAAC;kBAAE0B,cAAc,EAAE;gBAAlB,CAAD,CAFvD;;cAAA;gBAEE,KAAKJ,gBAFP;;gBAAA,IAGO,KAAKA,gBAHZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAGoCb,2DAAA,CAAuC,qCAAvC,CAHpC;;cAAA;gBAIE,KAAKW,MAAL,GAAchB,yCAAd;gBACA,KAAKyB,IAAL,CAAU3B,yCAAV,EAAgCM,6CAAhC;gBALF;gBAOID,8BAAA,CAAU,+BAAV;;gBAPJ,KAQQkB,OAAO,CAACM,WARhB;kBAAA;kBAAA;gBAAA;;gBASM,KAAKC,UAAL,GAAkB,IAAlB;gBATN;gBAAA,OAUY,KAAKC,OAAL,EAVZ;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAaI,KAAKJ,IAAL,CAAU3B,2CAAV;;cAbJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;WAiBA,4BAAmBuB,OAAnB,EAA+E;MAC7E,IAAI,KAAKL,MAAL,KAAgBhB,yCAApB,EAA0C;;MAC1C,IAAIqB,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEN,WAAb,EAA0B;QACxB,KAAKA,WAAL,GAAmBM,OAAO,CAACN,WAA3B;MACD;;MACD,IAAIM,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEU,QAAb,EAAuB;QACrB,KAAKA,QAAL,GAAgBV,OAAO,CAACU,QAAxB;MACD;IACF;;;;yFAED;QAAA;;QAAA;QAAA;UAAA;YAAA;cAAA;gBACE,mHADF,CAEE;;;gBACA,IAAI,CAAC,KAAKjB,WAAV,EAAuB,KAAKA,WAAL,GAAmBZ,uCAAc,CAACD,4CAAD,EAA0B,CAA1B,CAAjC;gBAEvB,KAAKe,MAAL,GAAchB,8CAAd;gBACA,KAAKyB,IAAL,CAAU3B,8CAAV,EAAqC;kBAAEmC,OAAO,EAAE7B,6CAAwBQ;gBAAnC,CAArC;;gBANF,IAOO,KAAKM,gBAPZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAOoCZ,uDAAA,CAAmC,mCAAnC,CAPpC;;cAAA;gBAAA;gBAAA;gBAAA,OASU,KAAKY,gBAAL,CAAsBiB,OAAtB,CAA8B;kBAAEC,MAAM,EAAE;gBAAV,CAA9B,CATV;;cAAA;gBAUYC,OAVZ,GAUwB,KAAKnB,gBAV7B,CAUYmB,OAVZ;;gBAAA,MAWQA,OAAO,KAAM,KAAKvB,WAAN,CAAwCuB,OAX5D;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAYY,KAAKC,WAAL,CAAiB,KAAKxB,WAAtB,CAZZ;;cAAA;gBAcI,KAAKE,MAAL,GAAchB,6CAAd;;gBAdJ,IAeS,KAAKuC,QAfd;kBAAA;kBAAA;gBAAA;;gBAAA,MAe8BjC,uDAAA,CAAmC,iCAAnC,CAf9B;;cAAA;gBAgBI,KAAKiC,QAAL,CAAcC,IAAd,CAAmB,YAAnB,EAAiC,YAAM;kBACrC;kBACA,MAAI,CAACC,UAAL;gBACD,CAHD;gBAIA,KAAKhB,IAAL,CAAU3B,6CAAV,EAAoC;kBAAEmC,OAAO,EAAE7B,6CAAX;kBAAqCsC,WAAW,EAAE,KAAKd;gBAAvD,CAApC;gBApBJ,kCAqBW,KAAKW,QArBhB;;cAAA;gBAAA;gBAAA;gBAuBI;gBACA,KAAKvB,MAAL,GAAchB,yCAAd;gBACA,KAAK4B,UAAL,GAAkB,KAAlB;gBACA,KAAKH,IAAL,CAAU3B,2CAAV;gBA1BJ,MA2BUQ,qDAAA,CAAiC,sCAAjC,CA3BV;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;4FA+BA;QAAA;;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAiBe,OAAjB,8DAAiD;kBAAEuB,OAAO,EAAE;gBAAX,CAAjD;gBAAA;gBAAA;;cAAA;gBAEE,uBAAKL,QAAL,kEAAeM,kBAAf;;gBACA,IAAIxB,OAAO,CAACuB,OAAZ,EAAqB;kBACnB,KAAK5B,MAAL,GAAchB,6CAAd;kBACA,KAAKkB,gBAAL,GAAwB,IAAxB;gBACD,CAHD,MAGO;kBACL;kBACA,KAAKF,MAAL,GAAchB,yCAAd;gBACD;;gBAED,KAAK4B,UAAL,GAAkB,KAAlB;gBACA,KAAKH,IAAL,CAAU3B,gDAAV;;cAZF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;6FAeA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACM,KAAKkB,MAAL,KAAgBhB,6CADtB;kBAAA;kBAAA;gBAAA;;gBAAA,MACsDM,uDAAA,CAAmC,uDAAnC,CADtD;;cAAA;gBAAA,kCAES,EAFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;6FAKA,kBAA0BQ,WAA1B;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKI,gBADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACoCZ,uDAAA,CAAmC,2BAAnC,CADpC;;cAAA;gBAAA;gBAAA;gBAAA,OAGU,KAAKY,gBAAL,CAAsBiB,OAAtB,CAA8B;kBAClCC,MAAM,EAAE,4BAD0B;kBAElCW,MAAM,EAAE,CAAC;oBAAEV,OAAO,EAAEvB,WAAW,CAACuB;kBAAvB,CAAD;gBAF0B,CAA9B,CAHV;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBAAA,MASQ,aAAkCW,IAAlC,KAA2C,IATnD;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAUY,KAAK9B,gBAAL,CAAsBiB,OAAtB,CAA8B;kBAClCC,MAAM,EAAE,yBAD0B;kBAElCW,MAAM,EAAE,CAAC;oBAAEV,OAAO,EAAEvB,WAAW,CAACuB,OAAvB;oBAAgCY,SAAS,EAAEnC,WAAW,CAACoC,WAAvD;oBAAoEC,OAAO,EAAE,CAACrC,WAAW,CAACsC,SAAb;kBAA7E,CAAD;gBAF0B,CAA9B,CAVZ;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EA9G4B7C","sources":["webpack://@web3auth/metamask-adapter/webpack/bootstrap","webpack://@web3auth/metamask-adapter/webpack/runtime/compat get default export","webpack://@web3auth/metamask-adapter/webpack/runtime/define property getters","webpack://@web3auth/metamask-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/metamask-adapter/webpack/runtime/make namespace object","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/get\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@metamask/detect-provider\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base-evm-adapter\"","webpack://@web3auth/metamask-adapter/./src/metamaskAdapter.ts","webpack://@web3auth/metamask-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/get\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/detect-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-evm-adapter\");","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n","export * from \"./metamaskAdapter\";\n"],"names":["detectEthereumProvider","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","getChainConfig","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","BaseEvmAdapter","MetamaskAdapter","adapterOptions","EIP155","EXTERNAL","METAMASK","NOT_READY","chainConfig","sessionTime","status","CONNECTED","metamaskProvider","_","Error","options","mustBeMetaMask","notInstalled","READY","emit","debug","autoConnect","rehydrated","connect","ERRORED","clientId","CONNECTING","adapter","notConnectedError","request","method","chainId","switchChain","provider","once","disconnect","reconnected","connectionError","cleanup","removeAllListeners","DISCONNECTED","params","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}