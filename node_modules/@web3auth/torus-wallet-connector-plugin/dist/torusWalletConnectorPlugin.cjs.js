/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "TorusWalletConnectorPlugin": () => (/* reexport */ TorusWalletConnectorPlugin)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/slicedToArray"
const slicedToArray_namespaceObject = require("@babel/runtime/helpers/slicedToArray");
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/asyncToGenerator"
const asyncToGenerator_namespaceObject = require("@babel/runtime/helpers/asyncToGenerator");
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/classCallCheck"
const classCallCheck_namespaceObject = require("@babel/runtime/helpers/classCallCheck");
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/createClass"
const createClass_namespaceObject = require("@babel/runtime/helpers/createClass");
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/regenerator"
const regenerator_namespaceObject = require("@babel/runtime/regenerator");
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator_namespaceObject);
;// CONCATENATED MODULE: external "@toruslabs/torus-embed"
const torus_embed_namespaceObject = require("@toruslabs/torus-embed");
var torus_embed_default = /*#__PURE__*/__webpack_require__.n(torus_embed_namespaceObject);
;// CONCATENATED MODULE: external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// CONCATENATED MODULE: external "@web3auth/base-plugin"
const base_plugin_namespaceObject = require("@web3auth/base-plugin");
;// CONCATENATED MODULE: external "loglevel"
const external_loglevel_namespaceObject = require("loglevel");
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/assertThisInitialized"
const assertThisInitialized_namespaceObject = require("@babel/runtime/helpers/assertThisInitialized");
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/inherits"
const inherits_namespaceObject = require("@babel/runtime/helpers/inherits");
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
const possibleConstructorReturn_namespaceObject = require("@babel/runtime/helpers/possibleConstructorReturn");
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/getPrototypeOf"
const getPrototypeOf_namespaceObject = require("@babel/runtime/helpers/getPrototypeOf");
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf_namespaceObject);
;// CONCATENATED MODULE: ./src/errors.ts








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var TorusWalletPluginError = /*#__PURE__*/function (_Web3AuthError) {
  inherits_default()(TorusWalletPluginError, _Web3AuthError);

  var _super = _createSuper(TorusWalletPluginError);

  function TorusWalletPluginError(code, message) {
    var _this;

    classCallCheck_default()(this, TorusWalletPluginError);

    // takes care of stack and proto
    _this = _super.call(this, code, message); // Set name explicitly as minification can mangle class names

    Object.defineProperty(assertThisInitialized_default()(_this), "name", {
      value: "TorusWalletPluginError"
    });
    return _this;
  }

  createClass_default()(TorusWalletPluginError, null, [{
    key: "fromCode",
    value: function fromCode(code) {
      var extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      return new TorusWalletPluginError(code, "".concat(TorusWalletPluginError.messages[code]).concat(extraMessage));
    }
  }, {
    key: "notInitialized",
    value: function notInitialized() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5210, extraMessage);
    }
  }, {
    key: "unsupportedAdapter",
    value: function unsupportedAdapter() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5211, extraMessage);
    }
  }, {
    key: "providerRequired",
    value: function providerRequired() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5212, extraMessage);
    }
  }, {
    key: "web3authRequired",
    value: function web3authRequired() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5213, extraMessage);
    }
  }, {
    key: "web3AuthNotConnected",
    value: function web3AuthNotConnected() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5214, extraMessage);
    }
  }, {
    key: "userInfoRequired",
    value: function userInfoRequired() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5215, extraMessage);
    }
  }, {
    key: "alreadyInitialized",
    value: function alreadyInitialized() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5216, extraMessage);
    }
  }, {
    key: "torusWalletNotSet",
    value: function torusWalletNotSet() {
      var extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return TorusWalletPluginError.fromCode(5217, extraMessage);
    }
  }]);

  return TorusWalletPluginError;
}(base_namespaceObject.Web3AuthError);

defineProperty_default()(TorusWalletPluginError, "messages", {
  5210: "Torus Wallet Plugin is not initialized",
  5211: "Web3Auth is connected to unsupported adapter. Torus wallet connector plugin requires web3auth connected to openlogin adapter.",
  5212: "Provider is required..",
  5213: "Web3Auth instance is required while initialization.",
  5214: "Web3Auth is not connected.",
  5215: "UserInfo is required.",
  5216: "Plugin is already initialized",
  5217: "Torus wallet instance is not set."
});
;// CONCATENATED MODULE: ./src/plugin.ts







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






var TorusWalletConnectorPlugin = /*#__PURE__*/function () {
  function TorusWalletConnectorPlugin(options) {
    classCallCheck_default()(this, TorusWalletConnectorPlugin);

    defineProperty_default()(this, "name", "TORUS_WALLET_CONNECTOR_PLUGIN");

    defineProperty_default()(this, "pluginNamespace", base_plugin_namespaceObject.PLUGIN_NAMESPACES.EIP155);

    defineProperty_default()(this, "torusWalletInstance", void 0);

    defineProperty_default()(this, "provider", null);

    defineProperty_default()(this, "web3auth", null);

    defineProperty_default()(this, "userInfo", null);

    defineProperty_default()(this, "isInitialized", false);

    defineProperty_default()(this, "walletInitOptions", null);

    var _options$torusWalletO = options.torusWalletOpts,
        torusWalletOpts = _options$torusWalletO === void 0 ? {} : _options$torusWalletO,
        walletInitOptions = options.walletInitOptions;
    var whiteLabel = walletInitOptions === null || walletInitOptions === void 0 ? void 0 : walletInitOptions.whiteLabel;
    if (!whiteLabel) throw new Error("whiteLabel is required");
    var logoDark = whiteLabel.logoDark,
        logoLight = whiteLabel.logoLight;
    if (!logoDark || !logoLight) throw new Error("logoDark and logoLight are required in whiteLabel config");
    this.torusWalletInstance = new (torus_embed_default())(torusWalletOpts);
    this.walletInitOptions = walletInitOptions;
  }

  createClass_default()(TorusWalletConnectorPlugin, [{
    key: "proxyProvider",
    get: function get() {
      return this.torusWalletInstance.isLoggedIn ? this.torusWalletInstance.provider : null;
    }
  }, {
    key: "initWithWeb3Auth",
    value: function () {
      var _initWithWeb3Auth = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(web3auth) {
        var connectedChainConfig, network;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.isInitialized) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (web3auth) {
                  _context.next = 4;
                  break;
                }

                throw TorusWalletPluginError.web3authRequired();

              case 4:
                if (!(web3auth.provider && web3auth.connectedAdapterName !== base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN)) {
                  _context.next = 6;
                  break;
                }

                throw TorusWalletPluginError.unsupportedAdapter();

              case 6:
                if (!web3auth.provider) {
                  _context.next = 11;
                  break;
                }

                this.provider = web3auth.provider;
                _context.next = 10;
                return web3auth.getUserInfo();

              case 10:
                this.userInfo = _context.sent;

              case 11:
                this.web3auth = web3auth;
                this.subscribeToWeb3AuthCoreEvents(web3auth);
                connectedChainConfig = web3auth.coreOptions.chainConfig;
                network = _objectSpread(_objectSpread({}, web3auth.coreOptions.chainConfig), {}, {
                  networkName: connectedChainConfig.displayName,
                  host: connectedChainConfig.rpcTarget,
                  chainId: parseInt(connectedChainConfig.chainId, 16)
                });
                _context.next = 17;
                return this.torusWalletInstance.init(_objectSpread(_objectSpread({}, this.walletInitOptions || {}), {}, {
                  network: network,
                  showTorusButton: false
                }));

              case 17:
                this.isInitialized = true;

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initWithWeb3Auth(_x) {
        return _initWithWeb3Auth.apply(this, arguments);
      }

      return initWithWeb3Auth;
    }()
  }, {
    key: "initWithProvider",
    value: function () {
      var _initWithProvider = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(provider, userInfo) {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.isInitialized) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                if (userInfo) {
                  _context2.next = 4;
                  break;
                }

                throw TorusWalletPluginError.userInfoRequired();

              case 4:
                if (provider) {
                  _context2.next = 6;
                  break;
                }

                throw TorusWalletPluginError.providerRequired();

              case 6:
                this.provider = provider;
                this.userInfo = userInfo;
                _context2.next = 10;
                return this.torusWalletInstance.init(this.walletInitOptions || {});

              case 10:
                this.isInitialized = true;

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function initWithProvider(_x2, _x3) {
        return _initWithProvider.apply(this, arguments);
      }

      return initWithProvider;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var _this$web3auth, privateKey, _this$userInfo;

        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.web3auth && this.web3auth.connectedAdapterName !== base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN)) {
                  _context3.next = 2;
                  break;
                }

                throw TorusWalletPluginError.unsupportedAdapter();

              case 2:
                if (this.isInitialized) {
                  _context3.next = 4;
                  break;
                }

                throw TorusWalletPluginError.notInitialized();

              case 4:
                if (this.provider) {
                  _context3.next = 17;
                  break;
                }

                if (!((_this$web3auth = this.web3auth) !== null && _this$web3auth !== void 0 && _this$web3auth.provider)) {
                  _context3.next = 12;
                  break;
                }

                this.provider = this.web3auth.provider;
                _context3.next = 9;
                return this.web3auth.getUserInfo();

              case 9:
                this.userInfo = _context3.sent;
                _context3.next = 17;
                break;

              case 12:
                if (!this.web3auth) {
                  _context3.next = 16;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 16:
                throw TorusWalletPluginError.providerRequired();

              case 17:
                _context3.prev = 17;
                _context3.next = 20;
                return this.provider.request({
                  method: "eth_private_key"
                });

              case 20:
                privateKey = _context3.sent;
                _context3.next = 29;
                break;

              case 23:
                _context3.prev = 23;
                _context3.t0 = _context3["catch"](17);
                external_loglevel_default().warn("unsupported method", _context3.t0, TorusWalletPluginError.unsupportedAdapter());

                if (!((_context3.t0 === null || _context3.t0 === void 0 ? void 0 : _context3.t0.code) === -32004)) {
                  _context3.next = 28;
                  break;
                }

                throw TorusWalletPluginError.unsupportedAdapter();

              case 28:
                throw _context3.t0;

              case 29:
                if (privateKey) {
                  _context3.next = 31;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 31:
                _context3.prev = 31;
                _context3.next = 34;
                return this.torusWalletInstance.loginWithPrivateKey({
                  privateKey: privateKey,
                  userInfo: _objectSpread(_objectSpread({}, this.userInfo), {}, {
                    typeOfLogin: (_this$userInfo = this.userInfo) === null || _this$userInfo === void 0 ? void 0 : _this$userInfo.typeOfLogin // openlogin's login type is subset of torus embed, so it is safe to cast.

                  })
                });

              case 34:
                this.torusWalletInstance.showTorusButton();
                this.subscribeToProviderEvents(this.provider);
                this.subscribeToWalletEvents();
                _context3.next = 42;
                break;

              case 39:
                _context3.prev = 39;
                _context3.t1 = _context3["catch"](31);
                external_loglevel_default().error(_context3.t1);

              case 42:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[17, 23], [31, 39]]);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "showWalletConnectScanner",
    value: function () {
      var _showWalletConnectScanner = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (this.torusWalletInstance.isLoggedIn) {
                  _context4.next = 2;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 2:
                _context4.next = 4;
                return this.torusWalletInstance.showWalletConnectScanner();

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function showWalletConnectScanner() {
        return _showWalletConnectScanner.apply(this, arguments);
      }

      return showWalletConnectScanner;
    }()
  }, {
    key: "initiateTopup",
    value: function () {
      var _initiateTopup = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5(provider, params) {
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this.torusWalletInstance.isLoggedIn) {
                  _context5.next = 2;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 2:
                _context5.next = 4;
                return this.torusWalletInstance.initiateTopup(provider, params);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function initiateTopup(_x4, _x5) {
        return _initiateTopup.apply(this, arguments);
      }

      return initiateTopup;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        var _this$web3auth2;

        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(((_this$web3auth2 = this.web3auth) === null || _this$web3auth2 === void 0 ? void 0 : _this$web3auth2.connectedAdapterName) !== base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN)) {
                  _context6.next = 2;
                  break;
                }

                throw TorusWalletPluginError.unsupportedAdapter();

              case 2:
                if (!this.torusWalletInstance.isLoggedIn) {
                  _context6.next = 7;
                  break;
                }

                _context6.next = 5;
                return this.torusWalletInstance.logout();

              case 5:
                _context6.next = 8;
                break;

              case 7:
                throw new Error("Torus Wallet plugin is not connected");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function disconnect() {
        return _disconnect.apply(this, arguments);
      }

      return disconnect;
    }()
  }, {
    key: "subscribeToWalletEvents",
    value: function subscribeToWalletEvents() {
      var _this$torusWalletInst,
          _this = this;

      (_this$torusWalletInst = this.torusWalletInstance) === null || _this$torusWalletInst === void 0 ? void 0 : _this$torusWalletInst.provider.on("accountsChanged", function () {
        var accounts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (accounts.length === 0) {
          var _this$web3auth3;

          _this.torusWalletInstance.hideTorusButton();

          (_this$web3auth3 = _this.web3auth) === null || _this$web3auth3 === void 0 ? void 0 : _this$web3auth3.logout();
        }
      });
    }
  }, {
    key: "subscribeToProviderEvents",
    value: function subscribeToProviderEvents(provider) {
      var _this2 = this;

      provider.on("accountsChanged", function () {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          accounts: []
        };

        _this2.setSelectedAddress(data.accounts[0]);
      });
      provider.on("chainChanged", function (data) {
        _this2.setChainID(parseInt(data.chainId, 16));
      });
      provider.on("disconnect", function () {
        _this2.torusWalletInstance.hideTorusButton();
      });
      provider.on("connect", function () {
        _this2.torusWalletInstance.showTorusButton();
      });
    }
  }, {
    key: "subscribeToWeb3AuthCoreEvents",
    value: function subscribeToWeb3AuthCoreEvents(web3Auth) {
      var _this3 = this;

      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, /*#__PURE__*/asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee7() {
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(web3Auth.connectedAdapterName !== base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN)) {
                  _context7.next = 3;
                  break;
                }

                external_loglevel_default().warn("".concat(web3Auth.connectedAdapterName, " is not compatible with torus wallet connector plugin"));
                return _context7.abrupt("return");

              case 3:
                _this3.provider = web3Auth.provider;
                _context7.next = 6;
                return web3Auth.getUserInfo();

              case 6:
                _this3.userInfo = _context7.sent;

                if (_this3.provider) {
                  _context7.next = 9;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 9:
                _this3.subscribeToProviderEvents(_this3.provider);

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      })));
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.DISCONNECTED, /*#__PURE__*/asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee8() {
        return regenerator_default().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _this3.provider = null;
                _this3.userInfo = null;

                if (!_this3.torusWalletInstance.isLoggedIn) {
                  _context8.next = 5;
                  break;
                }

                _context8.next = 5;
                return _this3.torusWalletInstance.logout();

              case 5:
                _this3.torusWalletInstance.hideTorusButton();

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      })));
    }
  }, {
    key: "sessionConfig",
    value: function () {
      var _sessionConfig = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee9() {
        var _yield$Promise$all, _yield$Promise$all2, accounts, chainId, privateKey, chainConfig;

        return regenerator_default().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (this.provider) {
                  _context9.next = 2;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 2:
                _context9.next = 4;
                return Promise.all([this.provider.request({
                  method: "eth_accounts"
                }), this.provider.request({
                  method: "eth_chainId"
                }), this.provider.request({
                  method: "eth_private_key"
                }), this.provider.request({
                  method: "eth_provider_config"
                })]);

              case 4:
                _yield$Promise$all = _context9.sent;
                _yield$Promise$all2 = slicedToArray_default()(_yield$Promise$all, 4);
                accounts = _yield$Promise$all2[0];
                chainId = _yield$Promise$all2[1];
                privateKey = _yield$Promise$all2[2];
                chainConfig = _yield$Promise$all2[3];
                return _context9.abrupt("return", {
                  chainId: parseInt(chainId, 16),
                  accounts: accounts,
                  privateKey: privateKey,
                  chainConfig: chainConfig
                });

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function sessionConfig() {
        return _sessionConfig.apply(this, arguments);
      }

      return sessionConfig;
    }()
  }, {
    key: "setSelectedAddress",
    value: function () {
      var _setSelectedAddress = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee10(address) {
        var _sessionConfig$accoun;

        var sessionConfig, _this$userInfo2;

        return regenerator_default().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (!(!this.torusWalletInstance.isLoggedIn || !this.userInfo)) {
                  _context10.next = 2;
                  break;
                }

                throw TorusWalletPluginError.web3AuthNotConnected();

              case 2:
                _context10.next = 4;
                return this.sessionConfig();

              case 4:
                sessionConfig = _context10.sent;

                if (!(address !== ((_sessionConfig$accoun = sessionConfig.accounts) === null || _sessionConfig$accoun === void 0 ? void 0 : _sessionConfig$accoun[0]))) {
                  _context10.next = 8;
                  break;
                }

                _context10.next = 8;
                return this.torusWalletInstance.loginWithPrivateKey({
                  privateKey: sessionConfig.privateKey,
                  userInfo: _objectSpread(_objectSpread({}, this.userInfo), {}, {
                    typeOfLogin: (_this$userInfo2 = this.userInfo) === null || _this$userInfo2 === void 0 ? void 0 : _this$userInfo2.typeOfLogin // openlogin's login type is subset of torus embed, so it is safe to cast.

                  })
                });

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function setSelectedAddress(_x6) {
        return _setSelectedAddress.apply(this, arguments);
      }

      return setSelectedAddress;
    }()
  }, {
    key: "setChainID",
    value: function () {
      var _setChainID = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee11(chainId) {
        var sessionConfig, _ref3, chainConfig;

        return regenerator_default().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.sessionConfig();

              case 2:
                sessionConfig = _context11.sent;
                _ref3 = sessionConfig || {}, chainConfig = _ref3.chainConfig;

                if (!(chainId !== sessionConfig.chainId && chainConfig)) {
                  _context11.next = 7;
                  break;
                }

                _context11.next = 7;
                return this.torusWalletInstance.setProvider(_objectSpread(_objectSpread({}, chainConfig), {}, {
                  chainId: chainId,
                  host: chainConfig.rpcTarget,
                  networkName: chainConfig.displayName
                }));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function setChainID(_x7) {
        return _setChainID.apply(this, arguments);
      }

      return setChainID;
    }()
  }]);

  return TorusWalletConnectorPlugin;
}();
;// CONCATENATED MODULE: ./src/index.ts

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=torusWalletConnectorPlugin.cjs.js.map