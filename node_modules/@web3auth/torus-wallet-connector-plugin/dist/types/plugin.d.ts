import TorusEmbed, { PAYMENT_PROVIDER_TYPE, PaymentParams, TorusCtorArgs, TorusParams } from "@toruslabs/torus-embed";
import { SafeEventEmitterProvider, UserInfo } from "@web3auth/base";
import { IPlugin } from "@web3auth/base-plugin";
import type { Web3AuthCore } from "@web3auth/core";
export declare type ProviderInfo = {
    provider?: SafeEventEmitterProvider;
    userInfo?: Omit<UserInfo, "isNewUser">;
};
export declare class TorusWalletConnectorPlugin implements IPlugin {
    name: string;
    readonly pluginNamespace: "eip155";
    torusWalletInstance: TorusEmbed;
    private provider;
    private web3auth;
    private userInfo;
    private isInitialized;
    private walletInitOptions;
    constructor(options: {
        torusWalletOpts?: TorusCtorArgs;
        walletInitOptions: Partial<TorusParams> & Required<Pick<TorusParams, "whiteLabel">>;
    });
    get proxyProvider(): SafeEventEmitterProvider | null;
    initWithWeb3Auth(web3auth: Web3AuthCore): Promise<void>;
    initWithProvider(provider: SafeEventEmitterProvider, userInfo: UserInfo): Promise<void>;
    connect(): Promise<void>;
    showWalletConnectScanner(): Promise<void>;
    initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<void>;
    disconnect(): Promise<void>;
    private subscribeToWalletEvents;
    private subscribeToProviderEvents;
    private subscribeToWeb3AuthCoreEvents;
    private sessionConfig;
    private setSelectedAddress;
    private setChainID;
}
