import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { WalletLoginError, saveToken, verifySignedChallenge, signChallenge, getSavedToken, checkIfTokenIsExpired, ADAPTER_STATUS, clearToken, BaseAdapter } from '@web3auth/base';
import bs58 from 'bs58';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BaseSolanaAdapter = /*#__PURE__*/function (_BaseAdapter) {
  _inherits(BaseSolanaAdapter, _BaseAdapter);

  var _super = _createSuper(BaseSolanaAdapter);

  function BaseSolanaAdapter() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BaseSolanaAdapter);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "clientId", void 0);

    _this.clientId = params.clientId;
    return _this;
  }

  _createClass(BaseSolanaAdapter, [{
    key: "authenticateUser",
    value: function () {
      var _authenticateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$chainConfig;

        var _this$chainConfig2, chainNamespace, chainId, accounts, existingToken, isExpired, payload, challenge, encodedMessage, signedMessage, idToken;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!this.provider || !((_this$chainConfig = this.chainConfig) !== null && _this$chainConfig !== void 0 && _this$chainConfig.chainId))) {
                  _context.next = 2;
                  break;
                }

                throw WalletLoginError.notConnectedError();

              case 2:
                _this$chainConfig2 = this.chainConfig, chainNamespace = _this$chainConfig2.chainNamespace, chainId = _this$chainConfig2.chainId;

                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {
                  _context.next = 5;
                  break;
                }

                throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");

              case 5:
                _context.next = 7;
                return this.provider.request({
                  method: "getAccounts"
                });

              case 7:
                accounts = _context.sent;

                if (!(accounts && accounts.length > 0)) {
                  _context.next = 27;
                  break;
                }

                existingToken = getSavedToken(accounts[0], this.name);

                if (!existingToken) {
                  _context.next = 14;
                  break;
                }

                isExpired = checkIfTokenIsExpired(existingToken);

                if (isExpired) {
                  _context.next = 14;
                  break;
                }

                return _context.abrupt("return", {
                  idToken: existingToken
                });

              case 14:
                payload = {
                  domain: window.location.origin,
                  uri: window.location.href,
                  address: accounts[0],
                  chainId: parseInt(chainId, 16),
                  version: "1",
                  nonce: Math.random().toString(36).slice(2),
                  issuedAt: new Date().toISOString()
                };
                _context.next = 17;
                return signChallenge(payload, chainNamespace);

              case 17:
                challenge = _context.sent;
                encodedMessage = new TextEncoder().encode(challenge);
                _context.next = 21;
                return this.provider.request({
                  method: "signMessage",
                  params: {
                    message: encodedMessage,
                    display: "utf8"
                  }
                });

              case 21:
                signedMessage = _context.sent;
                _context.next = 24;
                return verifySignedChallenge(chainNamespace, bs58.encode(signedMessage), challenge, this.name, this.sessionTime, this.clientId);

              case 24:
                idToken = _context.sent;
                saveToken(accounts[0], this.name, idToken);
                return _context.abrupt("return", {
                  idToken: idToken
                });

              case 27:
                throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function authenticateUser() {
        return _authenticateUser.apply(this, arguments);
      }

      return authenticateUser;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var accounts;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {
                  _context2.next = 2;
                  break;
                }

                throw WalletLoginError.disconnectionError("Not connected with wallet");

              case 2:
                _context2.next = 4;
                return this.provider.request({
                  method: "getAccounts"
                });

              case 4:
                accounts = _context2.sent;

                if (accounts && accounts.length > 0) {
                  clearToken(accounts[0], this.name);
                }

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function disconnect() {
        return _disconnect.apply(this, arguments);
      }

      return disconnect;
    }()
  }]);

  return BaseSolanaAdapter;
}(BaseAdapter);

export { BaseSolanaAdapter };
//# sourceMappingURL=baseSolanaAdapter.esm.js.map
